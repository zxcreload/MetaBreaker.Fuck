local Library = {}
local Version = "v2.0"
local TweenService, InputService = game:GetService("TweenService"), game:GetService("UserInputService")

-- Clear existing GUI
for _, v in next, game.CoreGui:GetChildren() do
    if v:IsA("ScreenGui") and v.Name == "PinkUI" then v:Destroy() end
end

local Mouse = game.Players.LocalPlayer:GetMouse()

-- Notification function
local function Notify(title, text)
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = title, 
        Text = text, 
        Duration = 5,
        Icon = "rbxassetid://6724408489"
    })
end

-- Draggable frame functionality
local function Dragify(frame, parent)
    parent = parent or frame
    local dragging, dragInput, mousePos, framePos
    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging, mousePos, framePos = true, input.Position, parent.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then dragging = false end
            end)
        end
    end)
    frame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then dragInput = input end
    end)
    InputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - mousePos
            parent.Position = UDim2.new(framePos.X.Scale, framePos.X.Offset + delta.X, framePos.Y.Scale, framePos.Y.Offset + delta.Y)
        end
    end)
end

-- Round number to nearest bracket
local function round(num, bracket)
    bracket = bracket or 1
    local a = math.floor(num/bracket + (math.sign(num) * 0.5)) * bracket
    return a < 0 and a + bracket or a
end

-- Button hover effect
local function buttoneffect(options)
    pcall(function()
        options.entered.MouseEnter:Connect(function()
            TweenService:Create(options.frame, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {
                BackgroundColor3 = Color3.fromRGB(255, 220, 230)
            }):Play()
        end)
        options.entered.MouseLeave:Connect(function()
            TweenService:Create(options.frame, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {
                BackgroundColor3 = options.default or Color3.fromRGB(255, 240, 245)
            }):Play()
        end)
    end)
end

-- Button click effect
local function clickEffect(options)
    options.button.MouseButton1Click:Connect(function()
        TweenService:Create(options.button, TweenInfo.new(0.1, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {
            Size = UDim2.new(0, options.button.AbsoluteSize.X - 5, 0, options.button.AbsoluteSize.Y - 5)
        }):Play()
        wait(0.1)
        TweenService:Create(options.button, TweenInfo.new(0.1, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {
            Size = options.originalSize
        }):Play()
    end)
end

-- Toggle GUI visibility
function Library:Toggle(value)
    local gui = game.CoreGui:FindFirstChild("PinkUI")
    if not gui then return end
    gui.Enabled = type(value) == "boolean" and value or not gui.Enabled
end

-- Create main window
function Library:Window(options)
    options.text = options.text or "PINK UI"
    local SG = Instance.new("ScreenGui", game.CoreGui)
    SG.Name = "PinkUI"
    
    local Body = Instance.new("Frame", SG)
    Body.BackgroundColor3 = Color3.fromRGB(255, 250, 250)
    Body.BorderSizePixel = 0
    Body.Position = UDim2.new(0.5, 0, 0.5, 0)
    Body.Size = UDim2.new(0, 650, 0, 500)
    Body.AnchorPoint = Vector2.new(0.5, 0.5)
    Body.ClipsDescendants = true
    
    -- Sharp corners (no rounding)
    local BodyStroke = Instance.new("UIStroke", Body)
    BodyStroke.Color = Color3.fromRGB(255, 180, 200)
    BodyStroke.Thickness = 2
    
    Dragify(Body)
    
    -- Header
    local Header = Instance.new("Frame", Body)
    Header.BackgroundColor3 = Color3.fromRGB(255, 180, 200)
    Header.BorderSizePixel = 0
    Header.Size = UDim2.new(1, 0, 0, 40)
    
    local Title = Instance.new("TextLabel", Header)
    Title.BackgroundTransparency = 1
    Title.Position = UDim2.new(0, 15, 0, 0)
    Title.Size = UDim2.new(0, 200, 1, 0)
    Title.Font = Enum.Font.GothamBold
    Title.Text = options.text
    Title.TextColor3 = Color3.fromRGB(255, 250, 250)
    Title.TextSize = 18
    Title.TextXAlignment = Enum.TextXAlignment.Left
    
    -- Close button
    local CloseButton = Instance.new("TextButton", Header)
    CloseButton.BackgroundTransparency = 1
    CloseButton.Position = UDim2.new(1, -35, 0, 0)
    CloseButton.Size = UDim2.new(0, 35, 1, 0)
    CloseButton.Font = Enum.Font.GothamBold
    CloseButton.Text = "X"
    CloseButton.TextColor3 = Color3.fromRGB(255, 250, 250)
    CloseButton.TextSize = 18
    CloseButton.MouseButton1Click:Connect(function()
        SG:Destroy()
    end)
    
    -- Tab buttons container
    local TabContainer = Instance.new("Frame", Body)
    TabContainer.BackgroundColor3 = Color3.fromRGB(255, 240, 245)
    TabContainer.BorderSizePixel = 0
    TabContainer.Position = UDim2.new(0, 0, 0, 40)
    TabContainer.Size = UDim2.new(0, 150, 0, 460)
    
    local TabListLayout = Instance.new("UIListLayout", TabContainer)
    TabListLayout.Padding = UDim.new(0, 5)
    TabListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    
    -- Content area
    local ContentArea = Instance.new("Frame", Body)
    ContentArea.BackgroundColor3 = Color3.fromRGB(255, 250, 250)
    ContentArea.BorderSizePixel = 0
    ContentArea.Position = UDim2.new(0, 150, 0, 40)
    ContentArea.Size = UDim2.new(0, 500, 0, 460)
    
    local ContentScrolling = Instance.new("ScrollingFrame", ContentArea)
    ContentScrolling.BackgroundTransparency = 1
    ContentScrolling.BorderSizePixel = 0
    ContentScrolling.Size = UDim2.new(1, 0, 1, 0)
    ContentScrolling.ScrollBarThickness = 5
    ContentScrolling.CanvasSize = UDim2.new(0, 0, 0, 0)
    ContentScrolling.ScrollBarImageColor3 = Color3.fromRGB(255, 180, 200)
    
    local ContentLayout = Instance.new("UIListLayout", ContentScrolling)
    ContentLayout.Padding = UDim.new(0, 15)
    ContentLayout.SortOrder = Enum.SortOrder.LayoutOrder
    
    ContentLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        ContentScrolling.CanvasSize = UDim2.new(0, 0, 0, ContentLayout.AbsoluteContentSize.Y + 20)
    end)
    
    local tabsections = {}
    
    function tabsections:TabSection(options)
        options.text = options.text or "TAB SECTION"
        local tabSection = Instance.new("Frame", TabContainer)
        tabSection.BackgroundTransparency = 1
        tabSection.Size = UDim2.new(1, -10, 0, 30)
        
        local tabSectionLabel = Instance.new("TextLabel", tabSection)
        tabSectionLabel.BackgroundTransparency = 1
        tabSectionLabel.Size = UDim2.new(1, 0, 1, 0)
        tabSectionLabel.Font = Enum.Font.GothamBold
        tabSectionLabel.Text = options.text
        tabSectionLabel.TextColor3 = Color3.fromRGB(255, 120, 150)
        tabSectionLabel.TextSize = 14
        tabSectionLabel.TextXAlignment = Enum.TextXAlignment.Left
        
        local sectionLayout = Instance.new("UIListLayout", tabSection)
        sectionLayout.Padding = UDim.new(0, 5)
        
        local tabs = {}
        
        function tabs:Tab(options)
            options.text = options.text or "NEW TAB"
            options.icon = options.icon or "rbxassetid://6724408489"
            
            local tabButton = Instance.new("TextButton", tabSection)
            tabButton.BackgroundColor3 = Color3.fromRGB(255, 240, 245)
            tabButton.BorderSizePixel = 0
            tabButton.Size = UDim2.new(1, 0, 0, 35)
            tabButton.AutoButtonColor = false
            tabButton.Font = Enum.Font.GothamSemibold
            tabButton.Text = "  " .. options.text
            tabButton.TextColor3 = Color3.fromRGB(100, 100, 100)
            tabButton.TextSize = 14
            tabButton.TextXAlignment = Enum.TextXAlignment.Left
            
            -- Sharp corners (no rounding)
            local tabButtonStroke = Instance.new("UIStroke", tabButton)
            tabButtonStroke.Color = Color3.fromRGB(255, 180, 200)
            tabButtonStroke.Thickness = 1
            
            local tabIcon = Instance.new("ImageLabel", tabButton)
            tabIcon.BackgroundTransparency = 1
            tabIcon.Position = UDim2.new(1, -25, 0.5, 0)
            tabIcon.Size = UDim2.new(0, 20, 0, 20)
            tabIcon.Image = options.icon
            tabIcon.ImageColor3 = Color3.fromRGB(255, 120, 150)
            tabIcon.AnchorPoint = Vector2.new(0.5, 0.5)
            
            local newPage = Instance.new("Frame", ContentScrolling)
            newPage.Visible = false
            newPage.BackgroundTransparency = 1
            newPage.Size = UDim2.new(1, 0, 0, 0)
            newPage.LayoutOrder = 999
            
            local pageLayout = Instance.new("UIListLayout", newPage)
            pageLayout.Padding = UDim.new(0, 15)
            
            pageLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                newPage.Size = UDim2.new(1, 0, 0, pageLayout.AbsoluteContentSize.Y)
            end)
            
            tabButton.MouseButton1Click:Connect(function()
                for _, v in next, ContentScrolling:GetChildren() do 
                    if v:IsA("Frame") and v ~= newPage then
                        v.Visible = false 
                    end
                end
                newPage.Visible = true
                
                -- Update tab colors
                for _, v in next, TabContainer:GetDescendants() do
                    if v:IsA("TextButton") then
                        TweenService:Create(v, TweenInfo.new(0.1), {
                            BackgroundColor3 = Color3.fromRGB(255, 240, 245),
                            TextColor3 = Color3.fromRGB(100, 100, 100)
                        }):Play()
                    end
                end
                
                TweenService:Create(tabButton, TweenInfo.new(0.1), {
                    BackgroundColor3 = Color3.fromRGB(255, 180, 200),
                    TextColor3 = Color3.fromRGB(255, 250, 250)
                }):Play()
            end)
            
            local sections = {}
            
            function sections:Section(options)
                options.text = options.text or "SECTION"
                local sectionFrame = Instance.new("Frame", newPage)
                sectionFrame.BackgroundColor3 = Color3.fromRGB(255, 250, 250)
                sectionFrame.BorderSizePixel = 0
                sectionFrame.Size = UDim2.new(1, -10, 0, 0)
                sectionFrame.LayoutOrder = 1
                
                -- Sharp border
                local sectionStroke = Instance.new("UIStroke", sectionFrame)
                sectionStroke.Color = Color3.fromRGB(255, 200, 220)
                sectionStroke.Thickness = 2
                
                local sectionLabel = Instance.new("TextLabel", sectionFrame)
                sectionLabel.BackgroundColor3 = Color3.fromRGB(255, 180, 200)
                sectionLabel.BorderSizePixel = 0
                sectionLabel.Size = UDim2.new(1, 0, 0, 30)
                sectionLabel.Font = Enum.Font.GothamBold
                sectionLabel.Text = "  " .. options.text
                sectionLabel.TextColor3 = Color3.fromRGB(255, 250, 250)
                sectionLabel.TextSize = 14
                sectionLabel.TextXAlignment = Enum.TextXAlignment.Left
                
                local sectionContent = Instance.new("Frame", sectionFrame)
                sectionContent.BackgroundTransparency = 1
                sectionContent.Position = UDim2.new(0, 0, 0, 35)
                sectionContent.Size = UDim2.new(1, 0, 0, 0)
                
                local sectionLayout = Instance.new("UIListLayout", sectionContent)
                sectionLayout.Padding = UDim.new(0, 10)
                
                sectionLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                    sectionContent.Size = UDim2.new(1, 0, 0, sectionLayout.AbsoluteContentSize.Y)
                    sectionFrame.Size = UDim2.new(1, -10, 0, 35 + sectionLayout.AbsoluteContentSize.Y)
                end)
                
                local elements = {}
                
                function elements:Button(options)
                    if not options.text or not options.callback then Notify("Button", "Missing arguments!") return end
                    
                    local buttonFrame = Instance.new("Frame", sectionContent)
                    buttonFrame.BackgroundTransparency = 1
                    buttonFrame.Size = UDim2.new(1, 0, 0, 30)
                    
                    local button = Instance.new("TextButton", buttonFrame)
                    button.BackgroundColor3 = Color3.fromRGB(255, 240, 245)
                    button.BorderSizePixel = 0
                    button.Position = UDim2.new(0, 0, 0, 0)
                    button.Size = UDim2.new(1, 0, 0, 30)
                    button.AutoButtonColor = false
                    button.Font = Enum.Font.GothamSemibold
                    button.Text = options.text
                    button.TextColor3 = Color3.fromRGB(100, 100, 100)
                    button.TextSize = 14
                    
                    -- Sharp border
                    local buttonStroke = Instance.new("UIStroke", button)
                    buttonStroke.Color = Color3.fromRGB(255, 180, 200)
                    buttonStroke.Thickness = 1
                    
                    buttoneffect({frame = button, entered = button, default = Color3.fromRGB(255, 240, 245)})
                    clickEffect({button = button, originalSize = button.Size})
                    
                    button.MouseButton1Click:Connect(function()
                        options.callback()
                    end)
                end
                
                function elements:Toggle(options)
                    if not options.text or not options.callback then Notify("Toggle", "Missing arguments!") return end
                    
                    local toggleFrame = Instance.new("Frame", sectionContent)
                    toggleFrame.BackgroundTransparency = 1
                    toggleFrame.Size = UDim2.new(1, 0, 0, 30)
                    
                    local toggleLabel = Instance.new("TextLabel", toggleFrame)
                    toggleLabel.BackgroundTransparency = 1
                    toggleLabel.Position = UDim2.new(0, 0, 0, 0)
                    toggleLabel.Size = UDim2.new(0, 200, 0, 30)
                    toggleLabel.Font = Enum.Font.GothamSemibold
                    toggleLabel.Text = options.text
                    toggleLabel.TextColor3 = Color3.fromRGB(100, 100, 100)
                    toggleLabel.TextSize = 14
                    toggleLabel.TextXAlignment = Enum.TextXAlignment.Left
                    
                    local toggleButton = Instance.new("TextButton", toggleFrame)
                    toggleButton.BackgroundColor3 = Color3.fromRGB(255, 240, 245)
                    toggleButton.BorderSizePixel = 0
                    toggleButton.Position = UDim2.new(1, -50, 0, 5)
                    toggleButton.Size = UDim2.new(0, 45, 0, 20)
                    toggleButton.AutoButtonColor = false
                    toggleButton.Text = ""
                    
                    -- Sharp border
                    local toggleStroke = Instance.new("UIStroke", toggleButton)
                    toggleStroke.Color = Color3.fromRGB(255, 180, 200)
                    toggleStroke.Thickness = 1
                    
                    local toggleState = Instance.new("Frame", toggleButton)
                    toggleState.BackgroundColor3 = Color3.fromRGB(255, 180, 200)
                    toggleState.BorderSizePixel = 0
                    toggleState.Position = UDim2.new(0, 2, 0, 2)
                    toggleState.Size = UDim2.new(0, 20, 0, 16)
                    
                    local State = options.state or false
                    if State then
                        toggleState.Position = UDim2.new(1, -22, 0, 2)
                        toggleState.BackgroundColor3 = Color3.fromRGB(255, 120, 150)
                    end
                    
                    local function PerformToggle()
                        State = not State
                        options.callback(State)
                        TweenService:Create(toggleState, TweenInfo.new(0.1), {
                            Position = State and UDim2.new(1, -22, 0, 2) or UDim2.new(0, 2, 0, 2),
                            BackgroundColor3 = State and Color3.fromRGB(255, 120, 150) or Color3.fromRGB(255, 180, 200)
                        }):Play()
                    end
                    
                    toggleButton.MouseButton1Click:Connect(PerformToggle)
                end
                
                function elements:Slider(options)
                    if not options.text or not options.min or not options.max or not options.callback then Notify("Slider", "Missing arguments!") return end
                    
                    local sliderFrame = Instance.new("Frame", sectionContent)
                    sliderFrame.BackgroundTransparency = 1
                    sliderFrame.Size = UDim2.new(1, 0, 0, 40)
                    
                    local sliderLabel = Instance.new("TextLabel", sliderFrame)
                    sliderLabel.BackgroundTransparency = 1
                    sliderLabel.Position = UDim2.new(0, 0, 0, 0)
                    sliderLabel.Size = UDim2.new(0, 200, 0, 20)
                    sliderLabel.Font = Enum.Font.GothamSemibold
                    sliderLabel.Text = options.text
                    sliderLabel.TextColor3 = Color3.fromRGB(100, 100, 100)
                    sliderLabel.TextSize = 14
                    sliderLabel.TextXAlignment = Enum.TextXAlignment.Left
                    
                    local sliderValue = Instance.new("TextBox", sliderFrame)
                    sliderValue.BackgroundColor3 = Color3.fromRGB(255, 240, 245)
                    sliderValue.BorderSizePixel = 0
                    sliderValue.Position = UDim2.new(1, -60, 0, 0)
                    sliderValue.Size = UDim2.new(0, 60, 0, 20)
                    sliderValue.Font = Enum.Font.GothamSemibold
                    sliderValue.Text = tostring(options.min)
                    sliderValue.TextColor3 = Color3.fromRGB(100, 100, 100)
                    sliderValue.TextSize = 14
                    
                    -- Sharp border
                    local valueStroke = Instance.new("UIStroke", sliderValue)
                    valueStroke.Color = Color3.fromRGB(255, 180, 200)
                    valueStroke.Thickness = 1
                    
                    local sliderBar = Instance.new("Frame", sliderFrame)
                    sliderBar.BackgroundColor3 = Color3.fromRGB(255, 240, 245)
                    sliderBar.BorderSizePixel = 0
                    sliderBar.Position = UDim2.new(0, 0, 0, 25)
                    sliderBar.Size = UDim2.new(1, 0, 0, 10)
                    
                    -- Sharp border
                    local barStroke = Instance.new("UIStroke", sliderBar)
                    barStroke.Color = Color3.fromRGB(255, 180, 200)
                    barStroke.Thickness = 1
                    
                    local sliderFill = Instance.new("Frame", sliderBar)
                    sliderFill.BackgroundColor3 = Color3.fromRGB(255, 120, 150)
                    sliderFill.BorderSizePixel = 0
                    sliderFill.Size = UDim2.new(0, 0, 1, 0)
                    
                    local sliderButton = Instance.new("TextButton", sliderBar)
                    sliderButton.BackgroundColor3 = Color3.fromRGB(255, 250, 250)
                    sliderButton.BorderSizePixel = 0
                    sliderButton.Position = UDim2.new(0, 0, 0, -3)
                    sliderButton.Size = UDim2.new(0, 16, 0, 16)
                    sliderButton.AutoButtonColor = false
                    sliderButton.Text = ""
                    
                    -- Sharp border
                    local buttonStroke = Instance.new("UIStroke", sliderButton)
                    buttonStroke.Color = Color3.fromRGB(255, 180, 200)
                    buttonStroke.Thickness = 1
                    
                    local Value, Held, percentage, step = nil, false, 0, 0.01
                    local function snap(number, factor) return factor == 0 and number or math.floor(number/factor+0.5)*factor end
                    
                    InputService.InputEnded:Connect(function() Held = false end)
                    sliderButton.MouseButton1Down:Connect(function() Held = true end)
                    
                    game:GetService("RunService").RenderStepped:Connect(function()
                        if Held then
                            local MousePos, FrameSize, FramePos = InputService:GetMouseLocation().X, sliderBar.AbsoluteSize.X, sliderBar.AbsolutePosition.X
                            percentage = math.clamp(snap((MousePos-FramePos)/FrameSize, step), 0, 1)
                            Value = round((((options.max - options.min) / 1) * percentage) + options.min, options.float)
                            Value = math.clamp(Value, options.min, options.max)
                            sliderValue.Text = tostring(Value)
                            sliderFill.Size = UDim2.new(percentage, 0, 1, 0)
                            sliderButton.Position = UDim2.new(percentage, -8, 0, -3)
                            options.callback(Value)
                        end
                    end)
                    
                    sliderValue.FocusLost:Connect(function(Enter)
                        if Enter and sliderValue.Text ~= "" then
                            local val = tonumber(sliderValue.Text)
                            if val then
                                if val > options.max then val = options.max
                                elseif val < options.min then val = options.min end
                                sliderValue.Text = tostring(val)
                                local percentage = (val - options.min) / (options.max - options.min)
                                sliderFill.Size = UDim2.new(percentage, 0, 1, 0)
                                sliderButton.Position = UDim2.new(percentage, -8, 0, -3)
                                options.callback(val)
                            end
                        end
                    end)
                end
                
                function elements:Dropdown(options)
                    if not options.text or not options.default or not options.list or not options.callback then Notify("Dropdown", "Missing arguments!") return end
                    
                    local dropdownFrame = Instance.new("Frame", sectionContent)
                    dropdownFrame.BackgroundTransparency = 1
                    dropdownFrame.Size = UDim2.new(1, 0, 0, 30)
                    
                    local dropdownButton = Instance.new("TextButton", dropdownFrame)
                    dropdownButton.BackgroundColor3 = Color3.fromRGB(255, 240, 245)
                    dropdownButton.BorderSizePixel = 0
                    dropdownButton.Size = UDim2.new(1, 0, 0, 30)
                    dropdownButton.AutoButtonColor = false
                    dropdownButton.Font = Enum.Font.GothamSemibold
                    dropdownButton.Text = "  " .. options.text
                    dropdownButton.TextColor3 = Color3.fromRGB(100, 100, 100)
                    dropdownButton.TextSize = 14
                    dropdownButton.TextXAlignment = Enum.TextXAlignment.Left
                    
                    -- Sharp border
                    local buttonStroke = Instance.new("UIStroke", dropdownButton)
                    buttonStroke.Color = Color3.fromRGB(255, 180, 200)
                    buttonStroke.Thickness = 1
                    
                    local dropdownValue = Instance.new("TextLabel", dropdownButton)
                    dropdownValue.BackgroundTransparency = 1
                    dropdownValue.Position = UDim2.new(1, -120, 0, 0)
                    dropdownValue.Size = UDim2.new(0, 100, 1, 0)
                    dropdownValue.Font = Enum.Font.GothamSemibold
                    dropdownValue.Text = options.default
                    dropdownValue.TextColor3 = Color3.fromRGB(100, 100, 100)
                    dropdownValue.TextSize = 14
                    dropdownValue.TextXAlignment = Enum.TextXAlignment.Right
                    
                    local dropdownArrow = Instance.new("ImageLabel", dropdownButton)
                    dropdownArrow.BackgroundTransparency = 1
                    dropdownArrow.Position = UDim2.new(1, -15, 0.5, 0)
                    dropdownArrow.Size = UDim2.new(0, 12, 0, 12)
                    dropdownArrow.Image = "rbxassetid://6031094667"
                    dropdownArrow.ImageColor3 = Color3.fromRGB(255, 120, 150)
                    dropdownArrow.AnchorPoint = Vector2.new(0.5, 0.5)
                    
                    local dropdownList = Instance.new("Frame", dropdownFrame)
                    dropdownList.BackgroundColor3 = Color3.fromRGB(255, 250, 250)
                    dropdownList.BorderSizePixel = 0
                    dropdownList.Position = UDim2.new(0, 0, 1, 5)
                    dropdownList.Size = UDim2.new(1, 0, 0, 0)
                    dropdownList.ClipsDescendants = true
                    dropdownList.Visible = false
                    
                    -- Sharp border
                    local listStroke = Instance.new("UIStroke", dropdownList)
                    listStroke.Color = Color3.fromRGB(255, 180, 200)
                    listStroke.Thickness = 1
                    
                    local listLayout = Instance.new("UIListLayout", dropdownList)
                    listLayout.SortOrder = Enum.SortOrder.LayoutOrder
                    
                    local DropYSize, Dropped = 0, false
                    
                    for _, v in next, options.list do
                        local optionButton = Instance.new("TextButton", dropdownList)
                        optionButton.BackgroundColor3 = Color3.fromRGB(255, 250, 250)
                        optionButton.BorderSizePixel = 0
                        optionButton.Size = UDim2.new(1, 0, 0, 25)
                        optionButton.AutoButtonColor = false
                        optionButton.Font = Enum.Font.GothamSemibold
                        optionButton.Text = "  " .. v
                        optionButton.TextColor3 = Color3.fromRGB(100, 100, 100)
                        optionButton.TextSize = 14
                        optionButton.TextXAlignment = Enum.TextXAlignment.Left
                        
                        -- Sharp border bottom
                        if _ < #options.list then
                            local optionStroke = Instance.new("Frame", optionButton)
                            optionStroke.BackgroundColor3 = Color3.fromRGB(255, 230, 235)
                            optionStroke.BorderSizePixel = 0
                            optionStroke.Position = UDim2.new(0, 0, 1, -1)
                            optionStroke.Size = UDim2.new(1, 0, 0, 1)
                        end
                        
                        optionButton.MouseButton1Click:Connect(function()
                            dropdownValue.Text = v
                            options.callback(v)
                            dropdownList.Visible = false
                            Dropped = false
                            TweenService:Create(dropdownList, TweenInfo.new(0.1), {
                                Size = UDim2.new(1, 0, 0, 0)
                            }):Play()
                        end)
                        
                        buttoneffect({frame = optionButton, entered = optionButton, default = Color3.fromRGB(255, 250, 250)})
                        
                        DropYSize = DropYSize + 25
                    end
                    
                    dropdownButton.MouseButton1Click:Connect(function()
                        Dropped = not Dropped
                        dropdownList.Visible = true
                        TweenService:Create(dropdownList, TweenInfo.new(0.1), {
                            Size = Dropped and UDim2.new(1, 0, 0, DropYSize) or UDim2.new(1, 0, 0, 0)
                        }):Play()
                    end)
                end
                
                function elements:Textbox(options)
                    if not options.text or not options.value or not options.callback then Notify("Textbox", "Missing arguments!") return end
                    
                    local textboxFrame = Instance.new("Frame", sectionContent)
                    textboxFrame.BackgroundTransparency = 1
                    textboxFrame.Size = UDim2.new(1, 0, 0, 30)
                    
                    local textboxLabel = Instance.new("TextLabel", textboxFrame)
                    textboxLabel.BackgroundTransparency = 1
                    textboxLabel.Position = UDim2.new(0, 0, 0, 0)
                    textboxLabel.Size = UDim2.new(0, 150, 0, 30)
                    textboxLabel.Font = Enum.Font.GothamSemibold
                    textboxLabel.Text = "  " .. options.text
                    textboxLabel.TextColor3 = Color3.fromRGB(100, 100, 100)
                    textboxLabel.TextSize = 14
                    textboxLabel.TextXAlignment = Enum.TextXAlignment.Left
                    
                    local textboxInput = Instance.new("TextBox", textboxFrame)
                    textboxInput.BackgroundColor3 = Color3.fromRGB(255, 240, 245)
                    textboxInput.BorderSizePixel = 0
                    textboxInput.Position = UDim2.new(0, 160, 0, 0)
                    textboxInput.Size = UDim2.new(1, -160, 0, 30)
                    textboxInput.Font = Enum.Font.GothamSemibold
                    textboxInput.Text = options.value
                    textboxInput.TextColor3 = Color3.fromRGB(100, 100, 100)
                    textboxInput.TextSize = 14
                    textboxInput.TextXAlignment = Enum.TextXAlignment.Left
                    
                    -- Sharp border
                    local inputStroke = Instance.new("UIStroke", textboxInput)
                    inputStroke.Color = Color3.fromRGB(255, 180, 200)
                    inputStroke.Thickness = 1
                    
                    textboxInput.Focused:Connect(function()
                        TweenService:Create(textboxInput, TweenInfo.new(0.1), {
                            BackgroundColor3 = Color3.fromRGB(255, 230, 235)
                        }):Play()
                    end)
                    
                    textboxInput.FocusLost:Connect(function(Enter)
                        TweenService:Create(textboxInput, TweenInfo.new(0.1), {
                            BackgroundColor3 = Color3.fromRGB(255, 240, 245)
                        }):Play()
                        if Enter and textboxInput.Text ~= "" then 
                            options.callback(textboxInput.Text)
                        end
                    end)
                end
                
                function elements:Keybind(options)
                    if not options.text or not options.default or not options.callback then Notify("Keybind", "Missing arguments") return end
                    
                    local blacklisted = {Return = true, Space = true, Tab = true, Unknown = true}
                    local short = {RightControl = "RCtrl", LeftControl = "LCtrl", LeftShift = "LShift", RightShift = "RShift", MouseButton1 = "M1", MouseButton2 = "M2", LeftAlt = "LAlt", RightAlt = "RAlt"}
                    local oldKey = options.default.Name
                    
                    local keybindFrame = Instance.new("Frame", sectionContent)
                    keybindFrame.BackgroundTransparency = 1
                    keybindFrame.Size = UDim2.new(1, 0, 0, 30)
                    
                    local keybindLabel = Instance.new("TextLabel", keybindFrame)
                    keybindLabel.BackgroundTransparency = 1
                    keybindLabel.Position = UDim2.new(0, 0, 0, 0)
                    keybindLabel.Size = UDim2.new(0, 150, 0, 30)
                    keybindLabel.Font = Enum.Font.GothamSemibold
                    keybindLabel.Text = "  " .. options.text
                    keybindLabel.TextColor3 = Color3.fromRGB(100, 100, 100)
                    keybindLabel.TextSize = 14
                    keybindLabel.TextXAlignment = Enum.TextXAlignment.Left
                    
                    local keybindButton = Instance.new("TextButton", keybindFrame)
                    keybindButton.BackgroundColor3 = Color3.fromRGB(255, 240, 245)
                    keybindButton.BorderSizePixel = 0
                    keybindButton.Position = UDim2.new(0, 160, 0, 0)
                    keybindButton.Size = UDim2.new(0, 100, 0, 30)
                    keybindButton.AutoButtonColor = false
                    keybindButton.Font = Enum.Font.GothamSemibold
                    keybindButton.Text = short[oldKey] or oldKey
                    keybindButton.TextColor3 = Color3.fromRGB(100, 100, 100)
                    keybindButton.TextSize = 14
                    
                    -- Sharp border
                    local buttonStroke = Instance.new("UIStroke", keybindButton)
                    buttonStroke.Color = Color3.fromRGB(255, 180, 200)
                    buttonStroke.Thickness = 1
                    
                    local listening = false
                    
                    keybindButton.MouseButton1Click:Connect(function()
                        listening = true
                        keybindButton.Text = "..."
                        TweenService:Create(keybindButton, TweenInfo.new(0.1), {
                            BackgroundColor3 = Color3.fromRGB(255, 230, 235)
                        }):Play()
                        
                        local input = InputService.InputBegan:Wait()
                        local newKey = input.KeyCode.Name
                        
                        TweenService:Create(keybindButton, TweenInfo.new(0.1), {
                            BackgroundColor3 = Color3.fromRGB(255, 240, 245)
                        }):Play()
                        
                        if not blacklisted[newKey] then
                            keybindButton.Text = short[newKey] or newKey
                            oldKey = newKey
                        else
                            keybindButton.Text = short[oldKey] or oldKey
                        end
                        
                        listening = false
                    end)
                    
                    InputService.InputBegan:Connect(function(key, focused)
                        if not focused and not listening and key.KeyCode.Name == oldKey then 
                            options.callback(oldKey)
                        end
                    end)
                end
                
                return elements
            end
            return sections
        end
        return tabs
    end
    return tabsections
end

return Library
