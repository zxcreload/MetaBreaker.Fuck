--[[ Legit Silent Aimbot with Adonis Anti-Cheat Bypass, Subtle MultiPoint, Specific Bot Support, Rapid Fire, Minimal Logging, and Error Fixes ]]--

--[[ Adonis Anti-Cheat Bypass ]]
for _, v in pairs(getgc(true)) do
    if type(v) == "table" then
        setreadonly(v, false)
        local indexInstance = rawget(v, "indexInstance")
        if type(indexInstance) == "table" and indexInstance[1] == "kick" then
            setreadonly(indexInstance, false)
            rawset(v, "Table", {"kick", function() coroutine.yield() end})
            break
        end
    end
end

--[[ Services ]]
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local GuiService = game:GetService("GuiService")

--[[ Variables ]]
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local Camera = Workspace.CurrentCamera
local Char = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local HRP = Char:WaitForChild("HumanoidRootPart")
local Humanoid = Char:WaitForChild("Humanoid")
local ScreenGui = Instance.new("ScreenGui", game.CoreGui)
ScreenGui.Name = "LegitAimIndicators"
ScreenGui.IgnoreGuiInset = true

--[[ Rapid Fire Variables ]]
local isFiring = false

--[[ Silent Aim Settings ]]
getgenv().SilentAim = {
    Enabled = true,
    FOV = {
        Enabled = true,
        Radius = 85,
        Sides = 16
    },
    MultiConfigPredictionEnabled = false,
    DefaultPrediction = 0.171123123,
    PredictionConfigs = {
        {Distance = 50, PredictionXZ = 0.12, PredictionY = 0.12},
        {Distance = 100, PredictionXZ = 0.14, PredictionY = 0.14},
        {Distance = 1000, PredictionXZ = 0.16, PredictionY = 0.16},
        {Distance = 10000, PredictionXZ = 0.18, PredictionY = 0.18}
    },
    AimParts = {
        "UpperTorso", "LowerTorso",
        "LeftUpperArm", "RightUpperArm", "LeftLowerArm", "RightLowerArm",
        "LeftHand", "RightHand",
        "LeftUpperLeg", "RightUpperLeg", "LeftLowerLeg", "RightLowerLeg",
        "LeftFoot", "RightFoot"
    },
    AvoidAimParts = {
        "Head", "LeftHand", "RightHand", "LeftFoot", "RightFoot"
    },
    AirAimParts = {"LeftUpperLeg", "RightUpperLeg"},
    MultiPointEnabled = true, -- Включение/выключение multipoint
    MultiPointOffsets = { -- Смещения для multipoint (минимальные значения)
        {0, 0, 0}, -- Центр (для совместимости, если MultiPoint выключен)
        {0.1, 0.1, 0}, -- Верх-право
        {-0.1, 0.1, 0}, -- Верх-лево
        {0.1, -0.1, 0}, -- Низ-право
        {-0.1, -0.1, 0}, -- Низ-лево
        {0, 0.1, 0}, -- Верх-центр
        {0, -0.1, 0}, -- Низ-центр
        {0.1, 0, 0}, -- Право-центр
        {-0.1, 0, 0} -- Лево-центр
    },
    HitChance = 100,
    ToggleKeybind = Enum.KeyCode.O, -- Toggle aimbot
    ResolverKeybind = Enum.KeyCode.J, -- Switch resolver mode
    TargetSelectionKeybind = Enum.KeyCode.K, -- Cycle target selection mode
    RapidFire = {
        Enabled = false,
        FireRate = 0, -- Задержка между активациями (в секундах)
        Keybind = Enum.KeyCode.C -- Toggle rapid fire
    },
    TargetSelectionMode = "CursorProximity", -- Distance, Health, CursorProximity
    VisibleCheck = true,
    WallCheck = true,
    ResolverMode = "Velocity", -- Velocity, MoveDirection, CalculateCFrame
    IndicatorEnabled = true,
    IndicatorFontSize = 12,
    IndicatorFont = Enum.Font.Sarpanch,
    GradientColors = {
        Start = {ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 170, 255)), ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 255, 255))},
        End = {ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)), ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 170, 255))}
    }
}

local SilentAim = getgenv().SilentAim
SilentAim.Selected = nil
SilentAim.SelectedPart = nil
local lastSwitchTime = 0 -- Время последнего переключения цели

--[[ Beam Variables ]]
local Beam, StartAttachment, EndAttachment

--[[ Indicators ]]
local Indicators = {
    Cheatname = nil,
    TargetName = nil,
    TargetHP = nil,
    LocalHP = nil,
    Distance = nil,
    Damage = {}
}

local gradientsToAnimate = {}

--[[ Initialize Beam ]]
local function InitBeam()
    if Beam then Beam:Destroy() end
    if StartAttachment then StartAttachment:Destroy() end
    if EndAttachment then EndAttachment:Destroy() end

    StartAttachment = Instance.new("Attachment")
    EndAttachment = Instance.new("Attachment")

    Beam = Instance.new("Beam")
    Beam.Color = ColorSequence.new(SilentAim.GradientColors.Start)
    Beam.Width0 = 0.1
    Beam.Width1 = 0.1
    Beam.Transparency = NumberSequence.new(0.5)
    Beam.Attachment0 = StartAttachment
    Beam.Attachment1 = EndAttachment
    Beam.Enabled = false
    Beam.Parent = Workspace
end

InitBeam()

--[[ Create Indicator ]]
local function CreateIndicator(name, text, offsetY, animate, isDamageIndicator)
    local frame = Instance.new("Frame")
    frame.Name = name
    frame.Size = UDim2.new(0, 200, 0, name == "Cheatname" and 24 or 20)
    frame.BackgroundTransparency = 1
    frame.Parent = ScreenGui

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, 0, 1, 0)
    label.BackgroundTransparency = 1
    label.Text = text
    label.TextSize = name == "Cheatname" and SilentAim.IndicatorFontSize + 2 or SilentAim.IndicatorFontSize
    label.Font = SilentAim.IndicatorFont
    label.TextColor3 = isDamageIndicator and Color3.fromRGB(255, 0, 0) or Color3.fromRGB(255, 255, 255)
    label.TextStrokeTransparency = 0.8
    label.TextXAlignment = Enum.TextXAlignment.Center
    label.Parent = frame

    if not isDamageIndicator then
        local gradient = Instance.new("UIGradient")
        gradient.Color = ColorSequence.new(SilentAim.GradientColors.Start)
        gradient.Parent = label
        table.insert(gradientsToAnimate, gradient)
    end

    if animate then
        frame.Position = UDim2.new(0.5, -300, 0.5, offsetY)
        local targetPosition = UDim2.new(0.5, -100, 0.5, offsetY)
        local tweenInfo = TweenInfo.new(0.7, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut)
        local tween = TweenService:Create(frame, tweenInfo, {Position = targetPosition})
        tween:Play()
    else
        frame.Position = UDim2.new(0.5, -100, 0.5, offsetY)
    end

    return frame, label
end

--[[ Initialize Indicators ]]
local function InitIndicators()
    Indicators.Cheatname = CreateIndicator("Cheatname", "LegitSilentAim.lua", 106, false)
    Indicators.TargetName = CreateIndicator("TargetName", "Target: N/A", 120, false)
    Indicators.TargetHP = CreateIndicator("TargetHP", "Target HP: N/A", 130, false)
    Indicators.LocalHP = CreateIndicator("LocalHP", "Local HP: N/A", 140, false)
    Indicators.Distance = CreateIndicator("Distance", "Distance: N/A", 150, false)
end

if SilentAim.IndicatorEnabled then
    local success, err = pcall(InitIndicators)
    if not success then
        warn("Error initializing indicators: " .. tostring(err))
    end
end

--[[ Gradient Animation ]]
local gradientAnimationConnection
local function StartGradientAnimation()
    if gradientAnimationConnection then
        gradientAnimationConnection:Disconnect()
    end

    local startTime = tick()
    local duration = 2

    gradientAnimationConnection = RunService.Heartbeat:Connect(function()
        local elapsed = (tick() - startTime) % duration
        local t = elapsed / duration

        local startKeypoints = SilentAim.GradientColors.Start
        local endKeypoints = SilentAim.GradientColors.End

        local newKeypoints = {}
        for i = 1, math.max(#startKeypoints, #endkeypoints) do
            local startPoint = startKeypoints[i] or startKeypoints[#startKeypoints]
            local endPoint = endKeypoints[i] or endKeypoints[#endkeypoints]
            local lerpedColor = Color3.new(
                startPoint.Value.R + (endPoint.Value.R - startPoint.Value.R) * t,
                startPoint.Value.G + (endPoint.Value.G - startPoint.Value.G) * t,
                startPoint.Value.B + (endPoint.Value.B - startPoint.Value.B) * t
            )
            table.insert(newKeypoints, ColorSequenceKeypoint.new(startPoint.Time, lerpedColor))
        end

        for _, gradient in ipairs(gradientsToAnimate) do
            if gradient and gradient.Parent then
                gradient.Color = ColorSequence.new(newKeypoints)
            end
        end

        if Beam and Beam.Parent then
            Beam.Color = ColorSequence.new(newKeypoints)
        end
    end)
end

local success, err = pcall(StartGradientAnimation)
if not success then
    warn("Error starting gradient animation: " .. tostring(err))
end

--[[ FOV Circle ]]
local fovLines = {outline = {}, inline = {}}
if SilentAim.FOV.Enabled then
    for i = 1, SilentAim.FOV.Sides do
        local o = Drawing.new("Line")
        o.Thickness = 3
        o.Color = Color3.new(0, 0, 0)
        o.Transparency = 1
        fovLines.outline[i] = o
        local l = Drawing.new("Line")
        l.Thickness = 1
        l.Color = Color3.new(1, 1, 1)
        l.Transparency = 1
        fovLines.inline[i] = l
    end
end

local function UpdateFOV()
    if not SilentAim.FOV.Enabled or not SilentAim.Enabled then
        for i = 1, SilentAim.FOV.Sides do
            fovLines.outline[i].Visible = false
            fovLines.inline[i].Visible = false
        end
        return
    end

    local center = UserInputService:GetMouseLocation() + GuiService:GetGuiInset() - Vector2.new(0, 58)
    for i = 1, SilentAim.FOV.Sides do
        local a1, a2 = math.rad(360 / SilentAim.FOV.Sides * (i - 1)), math.rad(360 / SilentAim.FOV.Sides * (i % SilentAim.FOV.Sides))
        fovLines.outline[i].From = center + Vector2.new(math.cos(a1), math.sin(a1)) * SilentAim.FOV.Radius
        fovLines.outline[i].To = center + Vector2.new(math.cos(a2), math.sin(a2)) * SilentAim.FOV.Radius
        fovLines.outline[i].Visible = true
        fovLines.inline[i].From = center + Vector2.new(math.cos(a1), math.sin(a1)) * SilentAim.FOV.Radius
        fovLines.inline[i].To = center + Vector2.new(math.cos(a2), math.sin(a2)) * SilentAim.FOV.Radius
        fovLines.inline[i].Visible = true
    end
end

--[[ Prediction Logic ]]
local lastPosition, lastUpdateTime
local function GetPredictionForDistance(distance)
    if not SilentAim.MultiConfigPredictionEnabled then
        return SilentAim.DefaultPrediction, SilentAim.DefaultPrediction
    end

    local selectedConfig = SilentAim.PredictionConfigs[1]
    for _, config in ipairs(SilentAim.PredictionConfigs) do
        if distance <= config.Distance then
            selectedConfig = config
            break
        end
    end
    return selectedConfig.PredictionXZ, selectedConfig.PredictionY
end

local function getPredictedPosition(target)
    if not target or not target:FindFirstChild("Humanoid") then
        return nil
    end

    local aimPart = SilentAim.SelectedPart
    if not aimPart then
        return nil
    end

    local aimPartPos = aimPart.Position
    if not lastPosition or not lastUpdateTime then
        lastPosition = aimPartPos
        lastUpdateTime = tick()
        return aimPartPos
    end

    local currentTime = tick()
    local deltaTime = currentTime - lastUpdateTime

    local localRoot = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    local distance = localRoot and (localRoot.Position - aimPartPos).Magnitude or math.huge
    local predictionXZ, predictionY = GetPredictionForDistance(distance)

    -- Отключаем предикцию для AirAimParts
    local isAirPart = table.find(SilentAim.AirAimParts, aimPart.Name)
    if isAirPart then
        return aimPartPos
    end

    if SilentAim.ResolverMode == "Velocity" then
        local velocity = aimPart.Velocity
        return aimPartPos + Vector3.new(velocity.X * predictionXZ, velocity.Y * predictionY, velocity.Z * predictionXZ)
    elseif SilentAim.ResolverMode == "MoveDirection" then
        return aimPartPos + (target:FindFirstChild("Humanoid").MoveDirection * (predictionXZ * 10))
    elseif SilentAim.ResolverMode == "CalculateCFrame" then
        if (aimPartPos - lastPosition).Magnitude < 0.001 then
            return aimPartPos
        else
            local distance = (aimPartPos - lastPosition).Magnitude
            local predictedDistance = (distance / deltaTime) * (0.1 * (predictionXZ * 10))
            local predictedPosition = aimPartPos + (aimPartPos - lastPosition).Unit * predictedDistance

            local yChange = (aimPartPos.Y - lastPosition.Y) / deltaTime * (0.1 * predictionY)
            predictedPosition = predictedPosition + Vector3.new(0, yChange, 0)

            lastUpdateTime = currentTime
            lastPosition = aimPartPos
            return predictedPosition
        end
    end

    lastUpdateTime = currentTime
    lastPosition = aimPartPos
    return aimPartPos
end

--[[ Utility Functions ]]
local function IsPartVisible(part, model)
    if not part or not model then return false end
    local origin = Camera.CFrame.Position
    local _, onScreen = Camera:WorldToViewportPoint(part.Position)
    if not onScreen then return false end
    local rayParams = RaycastParams.new()
    rayParams.FilterType = Enum.RaycastFilterType.Blacklist
    rayParams.FilterDescendantsInstances = {LocalPlayer.Character, Camera}
    local result = Workspace:Raycast(origin, part.Position - origin, rayParams)
    return not result or result.Instance:IsDescendantOf(model)
end

local function IsInFOV(part)
    if not part then return false end
    local center = UserInputService:GetMouseLocation() + GuiService:GetGuiInset() - Vector2.new(0, 58)
    local screenPos, onScreen = Camera:WorldToViewportPoint(part.Position)
    if not onScreen then return false end
    local distance = (Vector2.new(screenPos.X, screenPos.Y) - center).Magnitude
    return distance <= SilentAim.FOV.Radius
end

local function GetClosestPartToCursor(model)
    if not model or not model.Parent or not model:IsDescendantOf(Workspace) then return nil, math.huge end
    local humanoid = model:FindFirstChild("Humanoid")
    if not humanoid then return nil, math.huge end

    local cursorPos = UserInputService:GetMouseLocation() + GuiService:GetGuiInset() - Vector2.new(0, 58)
    local closestPart, closestDist = nil, math.huge
    local normalPartsAvailable = false

    -- Check if target is airborne
    local isAirborne = humanoid.FloorMaterial == Enum.Material.Air
    local targetParts = isAirborne and SilentAim.AirAimParts or SilentAim.AimParts

    -- First pass: Check normal parts (or air parts if airborne)
    for _, partName in ipairs(targetParts) do
        local part = model:FindFirstChild(partName)
        if isAirborne and not part then
            if partName == "LeftUpperLeg" then
                part = model:FindFirstChild("LeftLowerLeg")
            elseif partName == "RightUpperLeg" then
                part = model:FindFirstChild("RightLowerLeg")
            end
        end
        if part and (not SilentAim.VisibleCheck or IsPartVisible(part, model)) then
            local screenPos, onScreen = Camera:WorldToViewportPoint(part.Position)
            if onScreen then
                local dist = (Vector2.new(screenPos.X, screenPos.Y) - cursorPos).Magnitude
                if dist < closestDist and dist <= SilentAim.FOV.Radius then
                    closestPart = part
                    closestDist = dist
                end
                if not isAirborne then
                    normalPartsAvailable = true
                end
            end
        end
    end

    -- Second pass: Check AvoidAimParts only if no normal parts are available
    if not closestPart and not normalPartsAvailable and not isAirborne then
        for _, partName in ipairs(SilentAim.AvoidAimParts) do
            local part = model:FindFirstChild(partName)
            if part and (not SilentAim.VisibleCheck or IsPartVisible(part, model)) then
                local screenPos, onScreen = Camera:WorldToViewportPoint(part.Position)
                if onScreen then
                    local dist = (Vector2.new(screenPos.X, screenPos.Y) - cursorPos).Magnitude
                    if dist < closestDist and dist <= SilentAim.FOV.Radius then
                        closestPart = part
                        closestDist = dist
                    end
                end
            end
        end
    end

    return closestPart, closestDist
end

local function GetClosest()
    if not SilentAim.Enabled then
        SilentAim.Selected = nil
        SilentAim.SelectedPart = nil
        return
    end

    local potentialTargets = {}
    for _, plr in ipairs(Players:GetPlayers()) do
        if plr == LocalPlayer then continue end
        local char = plr.Character
        if char and char.Parent and char:IsDescendantOf(Workspace) then
            local humanoid = char:FindFirstChild("Humanoid")
            if humanoid and humanoid.Health > 0 then
                local part, cursorDist = GetClosestPartToCursor(char)
                if part then
                    local targetData = {
                        Target = char,
                        Part = part,
                        CursorDistance = cursorDist,
                        Distance = (LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and
                            (LocalPlayer.Character.HumanoidRootPart.Position - part.Position).Magnitude) or math.huge,
                        Health = humanoid.Health
                    }
                    table.insert(potentialTargets, targetData)
                end
            end
        end
    end

    -- Добавление поддержки конкретного бота "workspace.Bots.Dummy"
    local bot = Workspace:FindFirstChild("Bots") and Workspace.Bots:FindFirstChild("Dummy")
    if bot and bot:IsA("Model") and bot:FindFirstChild("Humanoid") and bot:FindFirstChild("HumanoidRootPart") then
        local humanoid = bot:FindFirstChild("Humanoid")
        if humanoid and humanoid.Health > 0 then
            local part, cursorDist = GetClosestPartToCursor(bot)
            if part then
                local targetData = {
                    Target = bot,
                    Part = part,
                    CursorDistance = cursorDist,
                    Distance = (LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and
                        (LocalPlayer.Character.HumanoidRootPart.Position - part.Position).Magnitude) or math.huge,
                    Health = humanoid.Health
                }
                table.insert(potentialTargets, targetData)
            end
        end
    end

    if #potentialTargets == 0 then
        SilentAim.Selected = nil
        SilentAim.SelectedPart = nil
        return
    end

    table.sort(potentialTargets, function(a, b)
        if SilentAim.TargetSelectionMode == "Distance" then
            return a.Distance < b.Distance
        elseif SilentAim.TargetSelectionMode == "Health" then
            return a.Health < b.Health
        elseif SilentAim.TargetSelectionMode == "CursorProximity" then
            return a.CursorDistance < b.CursorDistance
        end
        return false
    end)

    local newSelected = potentialTargets[1].Target
    if SilentAim.Selected ~= newSelected then
        lastSwitchTime = tick()
        SilentAim.Selected = newSelected
        SilentAim.SelectedPart = potentialTargets[1].Part
    else
        SilentAim.SelectedPart = potentialTargets[1].Part
    end
end

local function Check()
    if not SilentAim.Enabled or not SilentAim.Selected then
        return false
    end

    if not SilentAim.Selected.Parent or not SilentAim.Selected:IsDescendantOf(Workspace) then
        SilentAim.Selected = nil
        SilentAim.SelectedPart = nil
        return false
    end

    local humanoid = SilentAim.Selected:FindFirstChild("Humanoid")
    if not humanoid or humanoid.Health <= 0 then
        SilentAim.Selected = nil
        SilentAim.SelectedPart = nil
        return false
    end

    if not SilentAim.SelectedPart or not SilentAim.SelectedPart.Parent or not SilentAim.SelectedPart:IsDescendantOf(SilentAim.Selected) then
        local newPart, _ = GetClosestPartToCursor(SilentAim.Selected)
        SilentAim.SelectedPart = newPart
        if not SilentAim.SelectedPart then
            SilentAim.Selected = nil
            SilentAim.SelectedPart = nil
            return false
        end
    end

    return true
end

--[[ Update Indicators ]]
local function UpdateIndicators()
    if not SilentAim.IndicatorEnabled then return end

    local localHumanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid")
    local localHP = localHumanoid and math.floor(localHumanoid.Health) or "N/A"
    Indicators.LocalHP.TextLabel.Text = "Local HP: " .. tostring(localHP)

    if Check() and SilentAim.Selected then
        local targetHumanoid = SilentAim.Selected:FindFirstChild("Humanoid")
        local targetHP = targetHumanoid and math.floor(targetHumanoid.Health) or "N/A"
        Indicators.TargetHP.TextLabel.Text = "Target HP: " .. tostring(targetHP)
        Indicators.TargetName.TextLabel.Text = "Target: " .. (SilentAim.Selected.Name or "N/A")
        local distance = (LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and SilentAim.SelectedPart) and 
            math.floor((LocalPlayer.Character.HumanoidRootPart.Position - SilentAim.SelectedPart.Position).Magnitude) or "N/A"
        Indicators.Distance.TextLabel.Text = "Distance: " .. tostring(distance)
    else
        Indicators.TargetHP.TextLabel.Text = "Target HP: N/A"
        Indicators.TargetName.TextLabel.Text = "Target: N/A"
        Indicators.Distance.TextLabel.Text = "Distance: N/A"
    end
end

--[[ Update Tracer with Subtle MultiPoint ]]
local function UpdateTracer()
    Beam.Enabled = false
    if not Check() then return end

    local lChar = LocalPlayer.Character
    if not lChar then return end

    local lHead = lChar:FindFirstChild("Head")
    if not lHead then return end

    local tPart = SilentAim.SelectedPart
    if not tPart or not tPart.Parent or not tPart:IsDescendantOf(SilentAim.Selected) then
        local newPart, _ = GetClosestPartToCursor(SilentAim.Selected)
        SilentAim.SelectedPart = newPart
        if not SilentAim.SelectedPart then
            SilentAim.Selected = nil
            SilentAim.SelectedPart = nil
            return
        end
        tPart = SilentAim.SelectedPart
    end

    if SilentAim.WallCheck and not IsPartVisible(tPart, SilentAim.Selected) then
        return
    end

    local predictedPos = getPredictedPosition(SilentAim.Selected) or tPart.Position
    local targetPos = predictedPos

    -- Применяем Subtle MultiPoint смещение только для не-воздушных частей
    if SilentAim.MultiPointEnabled and not table.find(SilentAim.AirAimParts, tPart.Name) then
        local partSize = tPart.Size
        local offset = SilentAim.MultiPointOffsets[math.random(1, #SilentAim.MultiPointOffsets)]
        -- Минимальное смещение относительно размеров части тела
        local offsetVector = Vector3.new(
            offset[1] * partSize.X * 0.1, -- Уменьшенное смещение
            offset[2] * partSize.Y * 0.1, -- Уменьшенное смещение
            offset[3] * partSize.Z * 0.1  -- Уменьшенное смещение
        )
        targetPos = predictedPos + (tPart.CFrame:VectorToWorldSpace(offsetVector))
    end

    StartAttachment.Parent = lHead
    EndAttachment.Parent = tPart
    StartAttachment.WorldPosition = lHead.Position
    EndAttachment.WorldPosition = targetPos
    Beam.Enabled = true
end

--[[ Rapid Fire Functions ]]
local function reduceCooldowns(tool)
    -- Проверяем, доступна ли функция getconnections
    if not getconnections then
        return
    end

    local success, err = pcall(function()
        for _, connection in ipairs(getconnections(tool.Activated)) do
            local func = connection.Function
            if func then
                local funcInfo = debug.getinfo(func)
                for i = 1, funcInfo.nups do
                    local c, n = debug.getupvalue(func, i)
                    if type(c) == "number" then
                        debug.setupvalue(func, i, 0.01) -- Устанавливаем небольшую задержку
                    end
                end
            end
        end
    end)
    if not success then
        warn("Error in reduceCooldowns: " .. tostring(err))
    end
end

local function activateTool()
    if not LocalPlayer.Character then return end
    local tool = LocalPlayer.Character:FindFirstChildOfClass("Tool")
    if not tool then return end

    reduceCooldowns(tool)
    if tool and tool.Activate then
        local success, err = pcall(function()
            tool:Activate()
        end)
        if not success then
            warn("Error activating tool: " .. tostring(err))
        end
    end
end

-- Отслеживание ЛКМ для Rapid Fire
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if SilentAim.RapidFire.Enabled and input.UserInputType == Enum.UserInputType.MouseButton1 and not gameProcessed then
        isFiring = true
        while isFiring do
            local success, err = pcall(activateTool)
            if not success then
                warn("Error in Rapid Fire loop: " .. tostring(err))
                break
            end
            task.wait(SilentAim.RapidFire.FireRate)
        end
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        isFiring = false
    end
end)

--[[ Input Handling ]]
local targetSelectionModes = {"Distance", "Health", "CursorProximity"}
local resolverModes = {"Velocity", "MoveDirection", "CalculateCFrame"}
UserInputService.InputBegan:Connect(function(input, gpe)
    if gpe then return end
    if input.KeyCode == SilentAim.ToggleKeybind then
        SilentAim.Enabled = not SilentAim.Enabled
        if not SilentAim.Enabled then
            SilentAim.Selected = nil
            SilentAim.SelectedPart = nil
        end
        warn("Silent Aimbot: " .. (SilentAim.Enabled and "Enabled" or "Disabled"))
    elseif input.KeyCode == SilentAim.ResolverKeybind then
        local currentIndex = table.find(resolverModes, SilentAim.ResolverMode) or 1
        local nextIndex = (currentIndex % #resolverModes) + 1
        SilentAim.ResolverMode = resolverModes[nextIndex]
        warn("Resolver Mode: " .. SilentAim.ResolverMode)
    elseif input.KeyCode == SilentAim.TargetSelectionKeybind then
        local currentIndex = table.find(targetSelectionModes, SilentAim.TargetSelectionMode) or 1
        local nextIndex = (currentIndex % #targetSelectionModes) + 1
        SilentAim.TargetSelectionMode = targetSelectionModes[nextIndex]
        warn("Target Selection Mode: " .. SilentAim.TargetSelectionMode)
    elseif input.KeyCode == SilentAim.RapidFire.Keybind then
        SilentAim.RapidFire.Enabled = not SilentAim.RapidFire.Enabled
        warn("Rapid Fire: " .. (SilentAim.RapidFire.Enabled and "Enabled" or "Disabled"))
    end
end)

--[[ Player Events ]]
Players.PlayerRemoving:Connect(function(player)
    if SilentAim.Selected == player.Character then
        SilentAim.Selected = nil
        SilentAim.SelectedPart = nil
    end
end)

LocalPlayer.CharacterAdded:Connect(function(newCharacter)
    Char = newCharacter
    HRP = Char:WaitForChild("HumanoidRootPart")
    Humanoid = Char:WaitForChild("Humanoid")
end)

--[[ Silent Aim Hook ]]
local __index
local success, err = pcall(function()
    __index = hookmetamethod(game, "__index", function(t, k)
        if t:IsA("Mouse") and (k == "Hit" or k == "Target") then
            if not Check() or (SilentAim.WallCheck and not IsPartVisible(SilentAim.SelectedPart, SilentAim.Selected)) then
                return __index(t, k)
            end

            local selPart = SilentAim.SelectedPart
            if selPart then
                local predictedPos = getPredictedPosition(SilentAim.Selected) or selPart.Position
                local targetPos = predictedPos

                -- Применяем Subtle MultiPoint смещение только для не-воздушных частей
                if SilentAim.MultiPointEnabled and not table.find(SilentAim.AirAimParts, selPart.Name) then
                    local partSize = selPart.Size
                    local offset = SilentAim.MultiPointOffsets[math.random(1, #SilentAim.MultiPointOffsets)]
                    local offsetVector = Vector3.new(
                        offset[1] * partSize.X * 0.1,
                        offset[2] * partSize.Y * 0.1,
                        offset[3] * partSize.Z * 0.1
                    )
                    targetPos = predictedPos + (selPart.CFrame:VectorToWorldSpace(offsetVector))
                end

                local hit = CFrame.new(targetPos)
                return k == "Hit" and hit or selPart
            end
        end
        return __index(t, k)
    end)
end)
if not success then
    warn("Error hooking metamethod: " .. tostring(err))
end

--[[ Main Loop ]]
RunService.Heartbeat:Connect(function()
    local success, err = pcall(function()
        UpdateFOV()
        UpdateTracer()
        UpdateIndicators()
        if SilentAim.Enabled then
            GetClosest()
        end
    end)
    if not success then
        warn("Error in main loop: " .. tostring(err))
    end
end)

--[[ Cleanup ]]
game:BindToClose(function()
    if Beam then Beam:Destroy() end
    if StartAttachment then StartAttachment:Destroy() end
    if EndAttachment then EndAttachment:Destroy() end
    if ScreenGui then ScreenGui:Destroy() end
    if gradientAnimationConnection then
        gradientAnimationConnection:Disconnect()
    end
    for i = 1, SilentAim.FOV.Sides do
        fovLines.outline[i]:Remove()
        fovLines.inline[i]:Remove()
    end
end)

warn("Legit Silent Aimbot loaded successfully!")
warn("Press " .. tostring(SilentAim.ToggleKeybind) .. " to toggle aimbot")
warn("Press " .. tostring(SilentAim.ResolverKeybind) .. " to switch resolver mode")
warn("Press " .. tostring(SilentAim.TargetSelectionKeybind) .. " to switch target selection mode")
warn("Press " .. tostring(SilentAim.RapidFire.Keybind) .. " to toggle rapid fire")
