-- [[ // Error Handling // ]]
local Passed, Statement = pcall(function()
	-- [[ // Libraries // ]]
	local library = {
		Renders = {},
		Connections = {},
		Folder = "PuppyWare",
		Assets = "Assets",
		Configs = "Configs",
		Version = "1.0.0",
		Theme = {
			Accent = Color3.fromRGB(255, 120, 30),
			Background = Color3.fromRGB(25, 25, 25),
			Secondary = Color3.fromRGB(40, 40, 40),
			Text = Color3.fromRGB(255, 255, 255),
			Border = Color3.fromRGB(12, 12, 12)
		}
	}
	
	local utility = {}
	
	-- [[ // Tables // ]]
	local pages = {}
	local sections = {}
	
	-- [[ // Indexes // ]]
	do
		library.__index = library
		pages.__index = pages
		sections.__index = sections
	end
	
	-- [[ // Variables // ]] 
	local tws = game:GetService("TweenService")
	local uis = game:GetService("UserInputService")
	local cre = game:GetService("CoreGui")
	local runService = game:GetService("RunService")
	
	-- [[ // Utility Functions // ]]
	function utility:RenderObject(RenderType, RenderProperties, RenderHidden)
		local Render = Instance.new(RenderType)
		
		if RenderProperties and typeof(RenderProperties) == "table" then
			for Property, Value in pairs(RenderProperties) do
				if Property ~= "RenderTime" then
					Render[Property] = Value
				end
			end
		end
		
		library.Renders[#library.Renders + 1] = {Render, RenderProperties, RenderHidden, RenderProperties["RenderTime"] or nil}
		
		return Render
	end
	
	function utility:CreateConnection(ConnectionType, ConnectionCallback)
		local Connection = ConnectionType:Connect(ConnectionCallback)
		library.Connections[#library.Connections + 1] = Connection
		return Connection
	end
	
	function utility:MouseLocation()
		return uis:GetMouseLocation()
	end
	
	function utility:Serialise(Table)
		local Serialised = ""
		for Index, Value in pairs(Table) do
			Serialised = Serialised .. Value .. ", "
		end
		return Serialised:sub(0, #Serialised - 2)
	end
	
	function utility:Sort(Table1, Table2)
		local Table3 = {}
		for Index, Value in pairs(Table2) do
			if table.find(Table1, Index) then
				Table3[#Table3 + 1] = Value
			end
		end
		return Table3
	end
	
	function utility:CreateTween(Object, Properties, Duration, EasingStyle, EasingDirection)
		local TweenInfo = TweenInfo.new(Duration or 0.25, EasingStyle or Enum.EasingStyle.Linear, EasingDirection or Enum.EasingDirection.Out)
		local Tween = tws:Create(Object, TweenInfo, Properties)
		Tween:Play()
		return Tween
	end
	
	function utility:CreateRipple(Button, X, Y)
		local Ripple = Instance.new("Frame")
		Ripple.Name = "Ripple"
		Ripple.Parent = Button
		Ripple.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		Ripple.BackgroundTransparency = 0.6
		Ripple.BorderSizePixel = 0
		Ripple.Position = UDim2.new(0, X - Button.AbsolutePosition.X, 0, Y - Button.AbsolutePosition.Y)
		Ripple.Size = UDim2.new(0, 0, 0, 0)
		
		local Corner = Instance.new("UICorner")
		Corner.CornerRadius = UDim.new(1, 0)
		Corner.Parent = Ripple
		
		utility:CreateTween(Ripple, {
			Size = UDim2.new(2, 0, 2, 0),
			BackgroundTransparency = 1
		}, 0.5)
		
		game:GetService("Debris"):AddItem(Ripple, 0.5)
	end
	
	-- [[ // UI Functions // ]]
	function library:CreateWindow(Properties)
		Properties = Properties or {}
		
		local Window = {
			Pages = {},
			Accent = Properties.Accent or library.Theme.Accent,
			Enabled = true,
			Key = Properties.Key or Enum.KeyCode.Z,
			Title = Properties.Title or "PuppyWare",
			Size = Properties.Size or UDim2.new(0, 660, 0, 560)
		}
		
		-- // Window Creation
		local ScreenGui = utility:RenderObject("ScreenGui", {
			DisplayOrder = 9999,
			Enabled = true,
			IgnoreGuiInset = true,
			Parent = cre,
			ResetOnSpawn = false,
			ZIndexBehavior = "Global"
		})
		
		local MainFrame = utility:RenderObject("Frame", {
			AnchorPoint = Vector2.new(0.5, 0.5),
			BackgroundColor3 = library.Theme.Background,
			BackgroundTransparency = 0,
			BorderColor3 = library.Theme.Border,
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Parent = ScreenGui,
			Position = UDim2.new(0.5, 0, 0.5, 0),
			Size = Window.Size
		})
		
		-- // Window Title
		local TitleLabel = utility:RenderObject("TextLabel", {
			BackgroundTransparency = 1,
			Font = Enum.Font.GothamBold,
			Position = UDim2.new(0, 10, 0, 5),
			Size = UDim2.new(1, -20, 0, 20),
			Text = Window.Title,
			TextColor3 = library.Theme.Text,
			TextSize = 14,
			TextXAlignment = Enum.TextXAlignment.Left,
			Parent = MainFrame
		})
		
		-- // Window Content
		local ContentFrame = utility:RenderObject("Frame", {
			BackgroundColor3 = library.Theme.Secondary,
			BackgroundTransparency = 0,
			BorderSizePixel = 0,
			Position = UDim2.new(0, 1, 0, 30),
			Size = UDim2.new(1, -2, 1, -31),
			Parent = MainFrame
		})
		
		-- // Window Functions
		function Window:SetPage(Page)
			for index, page in pairs(Window.Pages) do
				if page.Open and page ~= Page then
					page:Set(false)
				end
			end
		end
		
		function Window:Fade(state)
			for index, render in pairs(library.Renders) do
				if not render[3] then
					if render[1].ClassName == "Frame" and (render[2]["BackgroundTransparency"] or 0) ~= 1 then
						utility:CreateTween(render[1], {
							BackgroundTransparency = state and (render[2]["BackgroundTransparency"] or 0) or 1
						}, render[4] or 0.25)
					elseif render[1].ClassName == "ImageLabel" then
						if (render[2]["BackgroundTransparency"] or 0) ~= 1 then
							utility:CreateTween(render[1], {
								BackgroundTransparency = state and (render[2]["BackgroundTransparency"] or 0) or 1
							}, render[4] or 0.25)
						end
						
						if (render[2]["ImageTransparency"] or 0) ~= 1 then
							utility:CreateTween(render[1], {
								ImageTransparency = state and (render[2]["ImageTransparency"] or 0) or 1
							}, render[4] or 0.25)
						end
					elseif render[1].ClassName == "TextLabel" then
						if (render[2]["BackgroundTransparency"] or 0) ~= 1 then
							utility:CreateTween(render[1], {
								BackgroundTransparency = state and (render[2]["BackgroundTransparency"] or 0) or 1
							}, render[4] or 0.25)
						end
						
						if (render[2]["TextTransparency"] or 0) ~= 1 then
							utility:CreateTween(render[1], {
								TextTransparency = state and (render[2]["TextTransparency"] or 0) or 1
							}, render[4] or 0.25)
						end
					end
				end
			end
		end
		
		-- // Window Events
		utility:CreateConnection(uis.InputBegan, function(Input)
			if Input.KeyCode == Window.Key then
				Window.Enabled = not Window.Enabled
				Window:Fade(Window.Enabled)
			end
		end)
		
		return Window
	end
	
	-- [[ // Page Functions // ]]
	function library:CreatePage(Properties)
		Properties = Properties or {}
		
		local Page = {
			Name = Properties.Name or "Page",
			Open = false
		}
		
		-- // Page Creation
		local PageFrame = utility:RenderObject("Frame", {
			BackgroundColor3 = library.Theme.Background,
			BackgroundTransparency = 0,
			BorderSizePixel = 0,
			Size = UDim2.new(1, 0, 1, 0)
		})
		
		local PageList = utility:RenderObject("UIListLayout", {
			Padding = UDim.new(0, 5),
			Parent = PageFrame,
			FillDirection = "Vertical",
			HorizontalAlignment = "Left",
			VerticalAlignment = "Top"
		})
		
		local PagePadding = utility:RenderObject("UIPadding", {
			Parent = PageFrame,
			PaddingLeft = UDim.new(0, 5),
			PaddingTop = UDim.new(0, 5)
		})
		
		-- // Page Functions
		function Page:Set(state)
			Page.Open = state
			PageFrame.Visible = state
		end
		
		return Page
	end
	
	-- [[ // Section Functions // ]]
	function library:CreateSection(Properties)
		Properties = Properties or {}
		
		local Section = {
			Name = Properties.Name or "Section",
			Size = Properties.Size or UDim2.new(1, -10, 0, 100)
		}
		
		-- // Section Creation
		local SectionFrame = utility:RenderObject("Frame", {
			BackgroundColor3 = library.Theme.Secondary,
			BackgroundTransparency = 0,
			BorderColor3 = library.Theme.Border,
			BorderSizePixel = 1,
			Size = Section.Size
		})
		
		local SectionTitle = utility:RenderObject("TextLabel", {
			BackgroundTransparency = 1,
			Font = Enum.Font.GothamBold,
			Position = UDim2.new(0, 5, 0, 5),
			Size = UDim2.new(1, -10, 0, 20),
			Text = Section.Name,
			TextColor3 = library.Theme.Text,
			TextSize = 14,
			TextXAlignment = Enum.TextXAlignment.Left,
			Parent = SectionFrame
		})
		
		local SectionContent = utility:RenderObject("Frame", {
			BackgroundTransparency = 1,
			Position = UDim2.new(0, 5, 0, 30),
			Size = UDim2.new(1, -10, 1, -35),
			Parent = SectionFrame
		})
		
		local SectionList = utility:RenderObject("UIListLayout", {
			Padding = UDim.new(0, 5),
			Parent = SectionContent,
			FillDirection = "Vertical",
			HorizontalAlignment = "Left",
			VerticalAlignment = "Top"
		})
		
		return Section
	end
	
	-- [[ // Button Functions // ]]
	function library:CreateButton(Properties)
		Properties = Properties or {}
		
		local Button = {
			Name = Properties.Name or "Button",
			Callback = Properties.Callback or function() end
		}
		
		-- // Button Creation
		local ButtonFrame = utility:RenderObject("Frame", {
			BackgroundColor3 = library.Theme.Secondary,
			BackgroundTransparency = 0,
			BorderColor3 = library.Theme.Border,
			BorderSizePixel = 1,
			Size = UDim2.new(1, 0, 0, 30)
		})
		
		local ButtonTitle = utility:RenderObject("TextLabel", {
			BackgroundTransparency = 1,
			Font = Enum.Font.GothamBold,
			Position = UDim2.new(0, 5, 0, 0),
			Size = UDim2.new(1, -10, 1, 0),
			Text = Button.Name,
			TextColor3 = library.Theme.Text,
			TextSize = 14,
			TextXAlignment = Enum.TextXAlignment.Left,
			Parent = ButtonFrame
		})
		
		-- // Button Events
		utility:CreateConnection(uis.InputBegan, function(Input)
			if Input.UserInputType == Enum.UserInputType.MouseButton1 then
				local MouseLocation = utility:MouseLocation()
				if MouseLocation.X >= ButtonFrame.AbsolutePosition.X and MouseLocation.X <= ButtonFrame.AbsolutePosition.X + ButtonFrame.AbsoluteSize.X and MouseLocation.Y >= ButtonFrame.AbsolutePosition.Y and MouseLocation.Y <= ButtonFrame.AbsolutePosition.Y + ButtonFrame.AbsoluteSize.Y then
					utility:CreateRipple(ButtonFrame, MouseLocation.X, MouseLocation.Y)
					Button.Callback()
				end
			end
		end)
		
		return ButtonFrame
	end
	
	-- [[ // Toggle Functions // ]]
	function library:CreateToggle(Properties)
		Properties = Properties or {}
		
		local Toggle = {
			Name = Properties.Name or "Toggle",
			Default = Properties.Default or false,
			Callback = Properties.Callback or function() end
		}
		
		-- // Toggle Creation
		local ToggleFrame = utility:RenderObject("Frame", {
			BackgroundColor3 = library.Theme.Secondary,
			BackgroundTransparency = 0,
			BorderColor3 = library.Theme.Border,
			BorderSizePixel = 1,
			Size = UDim2.new(1, 0, 0, 30)
		})
		
		local ToggleTitle = utility:RenderObject("TextLabel", {
			BackgroundTransparency = 1,
			Font = Enum.Font.GothamBold,
			Position = UDim2.new(0, 5, 0, 0),
			Size = UDim2.new(1, -40, 1, 0),
			Text = Toggle.Name,
			TextColor3 = library.Theme.Text,
			TextSize = 14,
			TextXAlignment = Enum.TextXAlignment.Left,
			Parent = ToggleFrame
		})
		
		local ToggleButton = utility:RenderObject("Frame", {
			BackgroundColor3 = Toggle.Default and library.Theme.Accent or library.Theme.Background,
			BackgroundTransparency = 0,
			BorderColor3 = library.Theme.Border,
			BorderSizePixel = 1,
			Position = UDim2.new(1, -35, 0.5, -10),
			Size = UDim2.new(0, 20, 0, 20),
			Parent = ToggleFrame
		})
		
		local ToggleCorner = utility:RenderObject("UICorner", {
			CornerRadius = UDim.new(1, 0),
			Parent = ToggleButton
		})
		
		-- // Toggle Events
		utility:CreateConnection(uis.InputBegan, function(Input)
			if Input.UserInputType == Enum.UserInputType.MouseButton1 then
				local MouseLocation = utility:MouseLocation()
				if MouseLocation.X >= ToggleFrame.AbsolutePosition.X and MouseLocation.X <= ToggleFrame.AbsolutePosition.X + ToggleFrame.AbsoluteSize.X and MouseLocation.Y >= ToggleFrame.AbsolutePosition.Y and MouseLocation.Y <= ToggleFrame.AbsolutePosition.Y + ToggleFrame.AbsoluteSize.Y then
					Toggle.Default = not Toggle.Default
					utility:CreateTween(ToggleButton, {
						BackgroundColor3 = Toggle.Default and library.Theme.Accent or library.Theme.Background
					}, 0.25)
					Toggle.Callback(Toggle.Default)
				end
			end
		end)
		
		return ToggleFrame
	end
	
	-- [[ // Slider Functions // ]]
	function library:CreateSlider(Properties)
		Properties = Properties or {}
		
		local Slider = {
			Name = Properties.Name or "Slider",
			Min = Properties.Min or 0,
			Max = Properties.Max or 100,
			Default = Properties.Default or 50,
			Callback = Properties.Callback or function() end
		}
		
		-- // Slider Creation
		local SliderFrame = utility:RenderObject("Frame", {
			BackgroundColor3 = library.Theme.Secondary,
			BackgroundTransparency = 0,
			BorderColor3 = library.Theme.Border,
			BorderSizePixel = 1,
			Size = UDim2.new(1, 0, 0, 50)
		})
		
		local SliderTitle = utility:RenderObject("TextLabel", {
			BackgroundTransparency = 1,
			Font = Enum.Font.GothamBold,
			Position = UDim2.new(0, 5, 0, 0),
			Size = UDim2.new(1, -10, 0, 20),
			Text = Slider.Name,
			TextColor3 = library.Theme.Text,
			TextSize = 14,
			TextXAlignment = Enum.TextXAlignment.Left,
			Parent = SliderFrame
		})
		
		local SliderValue = utility:RenderObject("TextLabel", {
			BackgroundTransparency = 1,
			Font = Enum.Font.GothamBold,
			Position = UDim2.new(0, 5, 0, 20),
			Size = UDim2.new(1, -10, 0, 20),
			Text = tostring(Slider.Default),
			TextColor3 = library.Theme.Text,
			TextSize = 14,
			TextXAlignment = Enum.TextXAlignment.Right,
			Parent = SliderFrame
		})
		
		local SliderBar = utility:RenderObject("Frame", {
			BackgroundColor3 = library.Theme.Background,
			BackgroundTransparency = 0,
			BorderColor3 = library.Theme.Border,
			BorderSizePixel = 1,
			Position = UDim2.new(0, 5, 0, 45),
			Size = UDim2.new(1, -10, 0, 5),
			Parent = SliderFrame
		})
		
		local SliderFill = utility:RenderObject("Frame", {
			BackgroundColor3 = library.Theme.Accent,
			BackgroundTransparency = 0,
			BorderSizePixel = 0,
			Size = UDim2.new((Slider.Default - Slider.Min) / (Slider.Max - Slider.Min), 0, 1, 0),
			Parent = SliderBar
		})
		
		-- // Slider Events
		local Dragging = false
		
		utility:CreateConnection(uis.InputBegan, function(Input)
			if Input.UserInputType == Enum.UserInputType.MouseButton1 then
				local MouseLocation = utility:MouseLocation()
				if MouseLocation.X >= SliderBar.AbsolutePosition.X and MouseLocation.X <= SliderBar.AbsolutePosition.X + SliderBar.AbsoluteSize.X and MouseLocation.Y >= SliderBar.AbsolutePosition.Y and MouseLocation.Y <= SliderBar.AbsolutePosition.Y + SliderBar.AbsoluteSize.Y then
					Dragging = true
				end
			end
		end)
		
		utility:CreateConnection(uis.InputEnded, function(Input)
			if Input.UserInputType == Enum.UserInputType.MouseButton1 then
				Dragging = false
			end
		end)
		
		utility:CreateConnection(runService.RenderStepped, function()
			if Dragging then
				local MouseLocation = utility:MouseLocation()
				local Percent = math.clamp((MouseLocation.X - SliderBar.AbsolutePosition.X) / SliderBar.AbsoluteSize.X, 0, 1)
				local Value = math.floor(Slider.Min + (Slider.Max - Slider.Min) * Percent)
				
				SliderFill.Size = UDim2.new(Percent, 0, 1, 0)
				SliderValue.Text = tostring(Value)
				Slider.Callback(Value)
			end
		end)
		
		return SliderFrame
	end
	
	-- [[ // TextBox Functions // ]]
	function library:CreateTextBox(Properties)
		Properties = Properties or {}
		
		local TextBox = {
			Name = Properties.Name or "TextBox",
			Default = Properties.Default or "",
			Callback = Properties.Callback or function() end
		}
		
		-- // TextBox Creation
		local TextBoxFrame = utility:RenderObject("Frame", {
			BackgroundColor3 = library.Theme.Secondary,
			BackgroundTransparency = 0,
			BorderColor3 = library.Theme.Border,
			BorderSizePixel = 1,
			Size = UDim2.new(1, 0, 0, 30)
		})
		
		local TextBoxTitle = utility:RenderObject("TextLabel", {
			BackgroundTransparency = 1,
			Font = Enum.Font.GothamBold,
			Position = UDim2.new(0, 5, 0, 0),
			Size = UDim2.new(1, -10, 1, 0),
			Text = TextBox.Name,
			TextColor3 = library.Theme.Text,
			TextSize = 14,
			TextXAlignment = Enum.TextXAlignment.Left,
			Parent = TextBoxFrame
		})
		
		local TextBoxInput = utility:RenderObject("TextBox", {
			BackgroundTransparency = 1,
			Font = Enum.Font.GothamBold,
			Position = UDim2.new(0, 5, 0, 0),
			Size = UDim2.new(1, -10, 1, 0),
			Text = TextBox.Default,
			TextColor3 = library.Theme.Text,
			TextSize = 14,
			TextXAlignment = Enum.TextXAlignment.Left,
			Parent = TextBoxFrame
		})
		
		-- // TextBox Events
		utility:CreateConnection(TextBoxInput.FocusLost, function()
			TextBox.Callback(TextBoxInput.Text)
		end)
		
		return TextBoxFrame
	end
	
	-- [[ // Dropdown Functions // ]]
	function library:CreateDropdown(Properties)
		Properties = Properties or {}
		
		local Dropdown = {
			Name = Properties.Name or "Dropdown",
			Options = Properties.Options or {},
			Default = Properties.Default or 1,
			Callback = Properties.Callback or function() end
		}
		
		-- // Dropdown Creation
		local DropdownFrame = utility:RenderObject("Frame", {
			BackgroundColor3 = library.Theme.Secondary,
			BackgroundTransparency = 0,
			BorderColor3 = library.Theme.Border,
			BorderSizePixel = 1,
			Size = UDim2.new(1, 0, 0, 30)
		})
		
		local DropdownTitle = utility:RenderObject("TextLabel", {
			BackgroundTransparency = 1,
			Font = Enum.Font.GothamBold,
			Position = UDim2.new(0, 5, 0, 0),
			Size = UDim2.new(1, -30, 1, 0),
			Text = Dropdown.Name,
			TextColor3 = library.Theme.Text,
			TextSize = 14,
			TextXAlignment = Enum.TextXAlignment.Left,
			Parent = DropdownFrame
		})
		
		local DropdownValue = utility:RenderObject("TextLabel", {
			BackgroundTransparency = 1,
			Font = Enum.Font.GothamBold,
			Position = UDim2.new(1, -25, 0, 0),
			Size = UDim2.new(0, 20, 1, 0),
			Text = "▼",
			TextColor3 = library.Theme.Text,
			TextSize = 14,
			TextXAlignment = Enum.TextXAlignment.Center,
			Parent = DropdownFrame
		})
		
		local DropdownList = utility:RenderObject("Frame", {
			BackgroundColor3 = library.Theme.Secondary,
			BackgroundTransparency = 0,
			BorderColor3 = library.Theme.Border,
			BorderSizePixel = 1,
			Position = UDim2.new(0, 0, 1, 1),
			Size = UDim2.new(1, 0, 0, 0),
			Visible = false,
			Parent = DropdownFrame
		})
		
		local DropdownListLayout = utility:RenderObject("UIListLayout", {
			Padding = UDim.new(0, 1),
			Parent = DropdownList,
			FillDirection = "Vertical",
			HorizontalAlignment = "Left",
			VerticalAlignment = "Top"
		})
		
		-- // Dropdown Functions
		function Dropdown:SetOptions(Options)
			Dropdown.Options = Options
			
			for _, Option in pairs(DropdownList:GetChildren()) do
				if Option:IsA("Frame") then
					Option:Destroy()
				end
			end
			
			for Index, Option in pairs(Options) do
				local OptionFrame = utility:RenderObject("Frame", {
					BackgroundColor3 = library.Theme.Background,
					BackgroundTransparency = 0,
					BorderColor3 = library.Theme.Border,
					BorderSizePixel = 1,
					Size = UDim2.new(1, 0, 0, 30),
					Parent = DropdownList
				})
				
				local OptionTitle = utility:RenderObject("TextLabel", {
					BackgroundTransparency = 1,
					Font = Enum.Font.GothamBold,
					Position = UDim2.new(0, 5, 0, 0),
					Size = UDim2.new(1, -10, 1, 0),
					Text = Option,
					TextColor3 = library.Theme.Text,
					TextSize = 14,
					TextXAlignment = Enum.TextXAlignment.Left,
					Parent = OptionFrame
				})
				
				utility:CreateConnection(uis.InputBegan, function(Input)
					if Input.UserInputType == Enum.UserInputType.MouseButton1 then
						local MouseLocation = utility:MouseLocation()
						if MouseLocation.X >= OptionFrame.AbsolutePosition.X and MouseLocation.X <= OptionFrame.AbsolutePosition.X + OptionFrame.AbsoluteSize.X and MouseLocation.Y >= OptionFrame.AbsolutePosition.Y and MouseLocation.Y <= OptionFrame.AbsolutePosition.Y + OptionFrame.AbsoluteSize.Y then
							Dropdown.Default = Index
							DropdownTitle.Text = Option
							DropdownList.Visible = false
							Dropdown.Callback(Option, Index)
						end
					end
				end)
			end
		end
		
		-- // Dropdown Events
		utility:CreateConnection(uis.InputBegan, function(Input)
			if Input.UserInputType == Enum.UserInputType.MouseButton1 then
				local MouseLocation = utility:MouseLocation()
				if MouseLocation.X >= DropdownFrame.AbsolutePosition.X and MouseLocation.X <= DropdownFrame.AbsolutePosition.X + DropdownFrame.AbsoluteSize.X and MouseLocation.Y >= DropdownFrame.AbsolutePosition.Y and MouseLocation.Y <= DropdownFrame.AbsolutePosition.Y + DropdownFrame.AbsoluteSize.Y then
					DropdownList.Visible = not DropdownList.Visible
					DropdownList.Size = UDim2.new(1, 0, 0, #Dropdown.Options * 31)
				else
					DropdownList.Visible = false
				end
			end
		end)
		
		Dropdown:SetOptions(Dropdown.Options)
		
		return DropdownFrame
	end
	
	-- [[ // ColorPicker Functions // ]]
	function library:CreateColorPicker(Properties)
		Properties = Properties or {}
		
		local ColorPicker = {
			Name = Properties.Name or "ColorPicker",
			Default = Properties.Default or Color3.fromRGB(255, 255, 255),
			Callback = Properties.Callback or function() end
		}
		
		-- // ColorPicker Creation
		local ColorPickerFrame = utility:RenderObject("Frame", {
			BackgroundColor3 = library.Theme.Secondary,
			BackgroundTransparency = 0,
			BorderColor3 = library.Theme.Border,
			BorderSizePixel = 1,
			Size = UDim2.new(1, 0, 0, 30)
		})
		
		local ColorPickerTitle = utility:RenderObject("TextLabel", {
			BackgroundTransparency = 1,
			Font = Enum.Font.GothamBold,
			Position = UDim2.new(0, 5, 0, 0),
			Size = UDim2.new(1, -40, 1, 0),
			Text = ColorPicker.Name,
			TextColor3 = library.Theme.Text,
			TextSize = 14,
			TextXAlignment = Enum.TextXAlignment.Left,
			Parent = ColorPickerFrame
		})
		
		local ColorPickerButton = utility:RenderObject("Frame", {
			BackgroundColor3 = ColorPicker.Default,
			BackgroundTransparency = 0,
			BorderColor3 = library.Theme.Border,
			BorderSizePixel = 1,
			Position = UDim2.new(1, -35, 0.5, -10),
			Size = UDim2.new(0, 20, 0, 20),
			Parent = ColorPickerFrame
		})
		
		local ColorPickerWindow = utility:RenderObject("Frame", {
			BackgroundColor3 = library.Theme.Secondary,
			BackgroundTransparency = 0,
			BorderColor3 = library.Theme.Border,
			BorderSizePixel = 1,
			Position = UDim2.new(1, 1, 0, 0),
			Size = UDim2.new(0, 200, 0, 200),
			Visible = false,
			Parent = ColorPickerFrame
		})
		
		local ColorPickerCanvas = utility:RenderObject("ImageLabel", {
			BackgroundColor3 = Color3.fromRGB(255, 255, 255),
			BackgroundTransparency = 0,
			BorderColor3 = library.Theme.Border,
			BorderSizePixel = 1,
			Position = UDim2.new(0, 5, 0, 5),
			Size = UDim2.new(1, -10, 1, -35),
			Image = "rbxassetid://8508019876",
			Parent = ColorPickerWindow
		})
		
		local ColorPickerSlider = utility:RenderObject("Frame", {
			BackgroundColor3 = Color3.fromRGB(255, 0, 0),
			BackgroundTransparency = 0,
			BorderColor3 = library.Theme.Border,
			BorderSizePixel = 1,
			Position = UDim2.new(0, 5, 1, -25),
			Size = UDim2.new(1, -10, 0, 20),
			Parent = ColorPickerWindow
		})
		
		-- // ColorPicker Events
		local Dragging = false
		local SliderDragging = false
		
		utility:CreateConnection(uis.InputBegan, function(Input)
			if Input.UserInputType == Enum.UserInputType.MouseButton1 then
				local MouseLocation = utility:MouseLocation()
				
				if MouseLocation.X >= ColorPickerFrame.AbsolutePosition.X and MouseLocation.X <= ColorPickerFrame.AbsolutePosition.X + ColorPickerFrame.AbsoluteSize.X and MouseLocation.Y >= ColorPickerFrame.AbsolutePosition.Y and MouseLocation.Y <= ColorPickerFrame.AbsolutePosition.Y + ColorPickerFrame.AbsoluteSize.Y then
					ColorPickerWindow.Visible = not ColorPickerWindow.Visible
				elseif ColorPickerWindow.Visible then
					if MouseLocation.X >= ColorPickerCanvas.AbsolutePosition.X and MouseLocation.X <= ColorPickerCanvas.AbsolutePosition.X + ColorPickerCanvas.AbsoluteSize.X and MouseLocation.Y >= ColorPickerCanvas.AbsolutePosition.Y and MouseLocation.Y <= ColorPickerCanvas.AbsolutePosition.Y + ColorPickerCanvas.AbsoluteSize.Y then
						Dragging = true
					elseif MouseLocation.X >= ColorPickerSlider.AbsolutePosition.X and MouseLocation.X <= ColorPickerSlider.AbsolutePosition.X + ColorPickerSlider.AbsoluteSize.X and MouseLocation.Y >= ColorPickerSlider.AbsolutePosition.Y and MouseLocation.Y <= ColorPickerSlider.AbsolutePosition.Y + ColorPickerSlider.AbsoluteSize.Y then
						SliderDragging = true
					else
						ColorPickerWindow.Visible = false
					end
				end
			end
		end)
		
		utility:CreateConnection(uis.InputEnded, function(Input)
			if Input.UserInputType == Enum.UserInputType.MouseButton1 then
				Dragging = false
				SliderDragging = false
			end
		end)
		
		utility:CreateConnection(runService.RenderStepped, function()
			if Dragging then
				local MouseLocation = utility:MouseLocation()
				local X = math.clamp((MouseLocation.X - ColorPickerCanvas.AbsolutePosition.X) / ColorPickerCanvas.AbsoluteSize.X, 0, 1)
				local Y = math.clamp((MouseLocation.Y - ColorPickerCanvas.AbsolutePosition.Y) / ColorPickerCanvas.AbsoluteSize.Y, 0, 1)
				
				local Color = Color3.fromHSV(X, Y, 1)
				ColorPickerButton.BackgroundColor3 = Color
				ColorPicker.Callback(Color)
			elseif SliderDragging then
				local MouseLocation = utility:MouseLocation()
				local X = math.clamp((MouseLocation.X - ColorPickerSlider.AbsolutePosition.X) / ColorPickerSlider.AbsoluteSize.X, 0, 1)
				
				local Color = Color3.fromHSV(X, 1, 1)
				ColorPickerSlider.BackgroundColor3 = Color
			end
		end)
		
		return ColorPickerFrame
	end
	
	-- [[ // Keybind Functions // ]]
	function library:CreateKeybind(Properties)
		Properties = Properties or {}
		
		local Keybind = {
			Name = Properties.Name or "Keybind",
			Default = Properties.Default or Enum.KeyCode.Z,
			Callback = Properties.Callback or function() end
		}
		
		-- // Keybind Creation
		local KeybindFrame = utility:RenderObject("Frame", {
			BackgroundColor3 = library.Theme.Secondary,
			BackgroundTransparency = 0,
			BorderColor3 = library.Theme.Border,
			BorderSizePixel = 1,
			Size = UDim2.new(1, 0, 0, 30)
		})
		
		local KeybindTitle = utility:RenderObject("TextLabel", {
			BackgroundTransparency = 1,
			Font = Enum.Font.GothamBold,
			Position = UDim2.new(0, 5, 0, 0),
			Size = UDim2.new(1, -40, 1, 0),
			Text = Keybind.Name,
			TextColor3 = library.Theme.Text,
			TextSize = 14,
			TextXAlignment = Enum.TextXAlignment.Left,
			Parent = KeybindFrame
		})
		
		local KeybindButton = utility:RenderObject("TextButton", {
			BackgroundColor3 = library.Theme.Background,
			BackgroundTransparency = 0,
			BorderColor3 = library.Theme.Border,
			BorderSizePixel = 1,
			Position = UDim2.new(1, -35, 0.5, -10),
			Size = UDim2.new(0, 20, 0, 20),
			Text = Keybind.Default.Name,
			TextColor3 = library.Theme.Text,
			TextSize = 14,
			Parent = KeybindFrame
		})
		
		-- // Keybind Events
		local Listening = false
		
		utility:CreateConnection(uis.InputBegan, function(Input)
			if Input.UserInputType == Enum.UserInputType.MouseButton1 then
				local MouseLocation = utility:MouseLocation()
				if MouseLocation.X >= KeybindButton.AbsolutePosition.X and MouseLocation.X <= KeybindButton.AbsolutePosition.X + KeybindButton.AbsoluteSize.X and MouseLocation.Y >= KeybindButton.AbsolutePosition.Y and MouseLocation.Y <= KeybindButton.AbsolutePosition.Y + KeybindButton.AbsoluteSize.Y then
					Listening = true
					KeybindButton.Text = "..."
				end
			elseif Listening and Input.UserInputType == Enum.UserInputType.Keyboard then
				Keybind.Default = Input.KeyCode
				KeybindButton.Text = Input.KeyCode.Name
				Listening = false
				Keybind.Callback(Input.KeyCode)
			end
		end)
		
		utility:CreateConnection(uis.InputBegan, function(Input)
			if Input.KeyCode == Keybind.Default then
				Keybind.Callback(Input.KeyCode)
			end
		end)
		
		return KeybindFrame
	end
	
	-- [[ // Return Library // ]]
	return library
end)

if not Passed then
	warn("Error:", Statement)
end
