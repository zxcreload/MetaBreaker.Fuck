--[[ Adonis Anti-Cheat Bypass ]]
for _, v in pairs(getgc(true)) do
    if type(v) == "table" then
        setreadonly(v, false)
        local indexInstance = rawget(v, "indexInstance")
        if type(indexInstance) == "table" and indexInstance[1] == "kick" then
            setreadonly(indexInstance, false)
            rawset(v, "Table", {"kick", function() coroutine.yield() end})
            warn("\n---[ INFO ]---\nBypassed Adonis Anti-Cheat/Anti-Exploit.\nMethod: Prevented Script Table Communication With Server.")
            break
        end
    end
end

--[[ Настройки Silent Aim ]]
getgenv().SilentAim = {
    Enabled = true,
    Prediction = 0.161123123,
    TargetParts = {
        "HumanoidRootPart",
        "UpperTorso",
        "LowerTorso",
        "Head",
        "LeftUpperArm",
        "RightUpperArm",
        "LeftLowerArm",
        "RightLowerArm",
        "LeftUpperLeg",
        "RightUpperLeg",
        "LeftLowerLeg",
        "RightLowerLeg",
        "UpperLegs",
        "LowerLegs",
        "Legs"
    },
    JumpAimPart = "Upperlegs",
    VisibleCheck = true,
    HitChance = 100,
    Keybind = Enum.KeyCode.E,
    IgnoreRagdoll = true,
    IgnoreGrabbed = true,
    WallCheck = true,
    
    -- Новые настройки
    TargetSelectionMode = "Keybind", -- "Keybind" или "Auto"
    Whitelist = { -- Список игроков или части ников
        "ExamplePlayer",
        "Friend",
        "Admin"
    },
    WhitelistEnabled = false, -- Включить вайтлист
    
    -- Настройки Resolver
    ResolverMode = "Velocity", -- "Velocity", "MoveDirection" или "CalculateCFrame"
    ResolverKeybind = Enum.KeyCode.J,
    PredictionXZ = 0.14,
    PredictionY = 0.14,

    -- Настройки индикаторов
    IndicatorEnabled = true,
    IndicatorFontSize = 12,
    IndicatorFont = Enum.Font.Sarpanch,
    GradientColors = {
        Start = {ColorSequenceKeypoint.new(0, Color3.fromRGB(128, 0, 255)), ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 255, 255))},
        End = {ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)), ColorSequenceKeypoint.new(1, Color3.fromRGB(128, 0, 255))}
    },
    GradientAnimationSpeed = 2, -- Оставляем для совместимости, но не используем
    DamageIndicatorDuration = 2, -- Время отображения индикатора урона в секундах
    MaxDamageIndicators = 3 -- Максимальное количество hit индикаторов
}

--[[ Сервисы ]]
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")

--[[ Переменные ]]
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local Camera = Workspace.CurrentCamera
local SilentAim = getgenv().SilentAim
local ScreenGui = Instance.new("ScreenGui", game.CoreGui)
ScreenGui.Name = "SilentAimIndicators"
ScreenGui.IgnoreGuiInset = true

--[[ Beam Variables ]]
local Beam, StartAttachment, EndAttachment

--[[ Инициализация Beam ]]
local function InitBeam()
    if Beam then Beam:Destroy() end
    if StartAttachment then StartAttachment:Destroy() end
    if EndAttachment then EndAttachment:Destroy() end

    StartAttachment = Instance.new("Attachment")
    EndAttachment = Instance.new("Attachment")

    Beam = Instance.new("Beam")
    Beam.Color = ColorSequence.new(Color3.fromRGB(255, 0, 0))
    Beam.Width0 = 0.2
    Beam.Width1 = 0.2
    Beam.Transparency = NumberSequence.new(0)
    Beam.Attachment0 = StartAttachment
    Beam.Attachment1 = EndAttachment
    Beam.Enabled = false
    Beam.Parent = Workspace
end

InitBeam()

SilentAim.Selected = nil
SilentAim.SelectedPart = nil

--[[ Resolver Variables ]]
local lastPosition = nil
local lastUpdateTime = nil

--[[ Индикаторы ]]
local Indicators = {
    TargetHP = nil,
    LocalHP = nil,
    Distance = nil,
    Damage = {}
}

local function CreateIndicator(name, text, offsetY)
    local frame = Instance.new("Frame")
    frame.Name = name
    frame.Size = UDim2.new(0, 200, 0, 20)
    frame.Position = UDim2.new(0.5, -100, 0.5, offsetY)
    frame.BackgroundTransparency = 1
    frame.Parent = ScreenGui

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, 0, 1, 0)
    label.BackgroundTransparency = 1
    label.Text = text
    label.TextSize = SilentAim.IndicatorFontSize
    label.Font = SilentAim.IndicatorFont
    label.TextColor3 = Color3.fromRGB(255, 255, 255)
    label.TextStrokeTransparency = 0.8
    label.TextXAlignment = Enum.TextXAlignment.Center
    label.Parent = frame

    local gradient = Instance.new("UIGradient")
    gradient.Color = ColorSequence.new(SilentAim.GradientColors.Start) -- Устанавливаем статический градиент
    gradient.Parent = label

    return frame
end

local function ShowDamageIndicator(targetName, damage, remainingHP)
    -- Создаем новый индикатор
    local text = string.format("hit %s %d (%d)", targetName, damage, remainingHP)
    local offsetY = 30 -- Начальная позиция для первого hit индикатора (ниже Distance)
    local dmgIndicator = CreateIndicator("Damage_" .. tostring(tick()), text, offsetY)
    table.insert(Indicators.Damage, 1, dmgIndicator) -- Вставляем в начало списка

    -- Ограничиваем количество индикаторов
    if #Indicators.Damage > SilentAim.MaxDamageIndicators then
        local oldestIndicator = table.remove(Indicators.Damage, #Indicators.Damage) -- Удаляем самый старый
        if oldestIndicator then
            oldestIndicator:Destroy()
        end
    end

    -- Обновляем позиции всех hit индикаторов
    for i, indicator in ipairs(Indicators.Damage) do
        indicator.Position = UDim2.new(0.5, -100, 0.5, 30 + ((i - 1) * 20))
    end

    -- Удаляем индикатор после заданного времени
    task.spawn(function()
        task.wait(SilentAim.DamageIndicatorDuration)
        for i, v in ipairs(Indicators.Damage) do
            if v == dmgIndicator then
                table.remove(Indicators.Damage, i)
                v:Destroy()
                break
            end
        end
        -- Обновляем позиции оставшихся индикаторов
        for i, indicator in ipairs(Indicators.Damage) do
            indicator.Position = UDim2.new(0.5, -100, 0.5, 30 + ((i - 1) * 20))
        end
    end)
end

local function InitIndicators()
    Indicators.TargetHP = CreateIndicator("TargetHP", "Target HP: N/A", -40) -- Друг под другом
    Indicators.LocalHP = CreateIndicator("LocalHP", "Local HP: N/A", -20)
    Indicators.Distance = CreateIndicator("Distance", "Distance: N/A", 0)
end

if SilentAim.IndicatorEnabled then
    InitIndicators()
end

--[[ Методы Resolver ]]
local function getPredictedPosition(targetPlayer)
    if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("Humanoid") then
        local aimPart = SilentAim.SelectedPart or targetPlayer.Character:FindFirstChild("HumanoidRootPart")
        if not aimPart then
            warn("[DEBUG] No aimPart found for targetPlayer")
            return nil
        end
        
        local aimPartPos = aimPart.Position
        
        if not lastPosition or not lastUpdateTime then
            lastPosition = aimPartPos
            lastUpdateTime = tick()
            return aimPartPos
        end

        local currentTime = tick()
        local deltaTime = currentTime - lastUpdateTime
        
        if SilentAim.ResolverMode == "Velocity" then
            local velocity = aimPart.Velocity
            return aimPartPos + Vector3.new(velocity.X * SilentAim.PredictionXZ, velocity.Y * SilentAim.PredictionY, velocity.Z * SilentAim.PredictionXZ)
        elseif SilentAim.ResolverMode == "MoveDirection" then
            return aimPartPos + (targetPlayer.Character.Humanoid.MoveDirection * (SilentAim.PredictionXZ * 10))
        elseif SilentAim.ResolverMode == "CalculateCFrame" then
            if (aimPartPos - lastPosition).Magnitude < 0.001 then
                return aimPartPos 
            else
                local distance = (aimPartPos - lastPosition).Magnitude
                local predictedDistance = (distance / deltaTime) * (0.1 * (SilentAim.PredictionXZ * 10))
                local predictedPosition = aimPartPos + (aimPartPos - lastPosition).Unit * predictedDistance
                
                local yChange = (aimPartPos.Y - lastPosition.Y) / deltaTime * (0.1 * SilentAim.PredictionY)
                predictedPosition = predictedPosition + Vector3.new(0, yChange, 0)
                
                lastUpdateTime = currentTime
                lastPosition = aimPartPos
                return predictedPosition
            end
        end
    end
    warn("[DEBUG] getPredictedPosition returned nil: No targetPlayer or Character/Humanoid")
    return nil
end

--[[ Проверка шанса попадания ]]
local function CalcChance(p)
    return math.random() * 100 <= p
end

--[[ Проверка видимости ]]
local function IsPartVisible(part, char)
    local origin = Camera.CFrame.Position
    local _, onScreen = Camera:WorldToViewportPoint(part.Position)

    if onScreen then
        local rayParams = RaycastParams.new()
        rayParams.FilterType = Enum.RaycastFilterType.Blacklist
        rayParams.FilterDescendantsInstances = {LocalPlayer.Character, Camera}
        local result = Workspace:Raycast(origin, part.Position - origin, rayParams)
        return not result or result.Instance:IsDescendantOf(char)
    end

    return false
end

--[[ Проверка вайтлиста ]]
local function IsWhitelisted(player)
    if not SilentAim.WhitelistEnabled then return true end
    
    for _, namePart in ipairs(SilentAim.Whitelist) do
        if string.find(player.Name:lower(), namePart:lower(), 1, true) then
            return true
        end
    end
    
    return false
end

--[[ Получение виртуальной части для комбинированных ног ]]
local function GetCombinedPart(char, partType)
    local leftPart, rightPart
    
    if partType == "UpperLegs" then
        leftPart = char:FindFirstChild("LeftUpperLeg")
        rightPart = char:FindFirstChild("RightUpperLeg")
    elseif partType == "LowerLegs" then
        leftPart = char:FindFirstChild("LeftLowerLeg")
        rightPart = char:FindFirstChild("RightLowerLeg")
    elseif partType == "Legs" then
        leftPart = char:FindFirstChild("LeftUpperLeg") or char:FindFirstChild("LeftLowerLeg")
        rightPart = char:FindFirstChild("RightUpperLeg") or char:FindFirstChild("RightLowerLeg")
    end
    
    if not leftPart or not rightPart then
        warn("[DEBUG] GetCombinedPart failed: Missing left or right part for " .. partType)
        return nil
    end
    
    local combinedPart = Instance.new("Part")
    combinedPart.Size = Vector3.new(0.1, 0.1, 0.1)
    combinedPart.Transparency = 1
    combinedPart.CanCollide = false
    combinedPart.Anchored = true
    
    local position = (leftPart.Position + rightPart.Position) / 2
    local velocity = (leftPart.Velocity + rightPart.Velocity) / 2
    
    combinedPart.Position = position
    combinedPart.Velocity = velocity
    
    return combinedPart
end

--[[ Проверка состояния цели ]]
local function Check()
    local sel = SilentAim
    if not (sel.Enabled and sel.Selected and sel.SelectedPart and sel.Selected ~= LocalPlayer) then
        warn("[DEBUG] Check failed: Enabled=" .. tostring(sel.Enabled) .. ", Selected=" .. tostring(sel.Selected) .. ", SelectedPart=" .. tostring(sel.SelectedPart))
        return false
    end

    local char = sel.Selected.Character
    if not char then
        warn("[DEBUG] Check failed: No character for selected player")
        return false
    end

    local humanoid = char:FindFirstChild("Humanoid")
    if not humanoid or humanoid.Health <= 0 then
        sel.Selected = nil
        sel.SelectedPart = nil
        warn("[DEBUG] Check failed: No humanoid or humanoid health <= 0")
        return false
    end

    local ko = char:WaitForChild("BodyEffects"):FindFirstChild("K.O")
    if not ko then
        warn("[DEBUG] Check failed: No K.O in BodyEffects")
        return false
    end
    local koValue = ko.Value
    local grabbed = char:FindFirstChild("GRABBING_CONSTRAINT") ~= nil

    if sel.IgnoreRagdoll and koValue then
        warn("[DEBUG] Check failed: IgnoreRagdoll and KO")
        return false
    end
    if sel.IgnoreGrabbed and grabbed then
        warn("[DEBUG] Check failed: IgnoreGrabbed and grabbed")
        return false
    end

    return true
end

--[[ Получение ближайшей видимой части тела ]]
local function ClosestPart(char)
    local humanoid = char:FindFirstChild("Humanoid")
    if not humanoid then
        warn("[DEBUG] ClosestPart failed: No humanoid in character")
        return nil
    end

    local isJumping = humanoid:GetState() == Enum.HumanoidStateType.Jumping

    if isJumping and SilentAim.JumpAimPart then
        local jumpPart = char:FindFirstChild(SilentAim.JumpAimPart)
        if not jumpPart and (SilentAim.JumpAimPart == "UpperLegs" or SilentAim.JumpAimPart == "LowerLegs" or SilentAim.JumpAimPart == "Legs") then
            jumpPart = GetCombinedPart(char, SilentAim.JumpAimPart)
        end
        
        if jumpPart and (not SilentAim.WallCheck or IsPartVisible(jumpPart, char)) then
            local _, onScreen = Camera:WorldToViewportPoint(jumpPart.Position)
            if onScreen then
                warn("[DEBUG] ClosestPart: Selected jump part " .. SilentAim.JumpAimPart)
                return jumpPart
            end
        end
    end

    for _, partName in ipairs(SilentAim.TargetParts) do
        local part = char:FindFirstChild(partName)
        if not part and (partName == "UpperLegs" or partName == "LowerLegs" or partName == "Legs") then
            part = GetCombinedPart(char, partName)
        end
        
        if part then
            local isVisible = not SilentAim.WallCheck or IsPartVisible(part, char)
            local _, onScreen = Camera:WorldToViewportPoint(part.Position)
            if isVisible and onScreen then
                warn("[DEBUG] ClosestPart: Selected part " .. partName)
                return part
            end
        end
    end

    warn("[DEBUG] ClosestPart: No visible part found")
    return nil
end

--[[ Получение ближайшего игрока ]]
local function GetClosest()
    if not CalcChance(SilentAim.HitChance) then
        SilentAim.Selected = LocalPlayer
        SilentAim.SelectedPart = nil
        warn("[DEBUG] GetClosest failed: HitChance check failed")
        return
    end

    local closest, shortest = nil, math.huge
    local targetPart = nil

    for _, plr in ipairs(Players:GetPlayers()) do
        if plr == LocalPlayer or not IsWhitelisted(plr) then
            warn("[DEBUG] GetClosest: Skipping player " .. plr.Name .. " (LocalPlayer or not whitelisted)")
            continue
        end
        
        local char = plr.Character
        if char and char:FindFirstChild("Humanoid") and char.Humanoid.Health > 0 then
            local part = ClosestPart(char)
            if part then
                local pos, onScreen = Camera:WorldToViewportPoint(part.Position)
                local dist = (Vector2.new(pos.X, pos.Y) - Vector2.new(Mouse.X, Mouse.Y)).Magnitude

                if dist < shortest and (not SilentAim.VisibleCheck or IsPartVisible(part, char)) then
                    closest = plr
                    targetPart = part
                    shortest = dist
                    warn("[DEBUG] GetClosest: Found potential target " .. plr.Name .. " at distance " .. dist)
                end
            else
                warn("[DEBUG] GetClosest: No valid part found for " .. plr.Name)
            end
        else
            warn("[DEBUG] GetClosest: No character or humanoid for " .. plr.Name)
        end
    end

    SilentAim.Selected = closest
    SilentAim.SelectedPart = targetPart
    if closest then
        warn("[DEBUG] GetClosest: Selected target " .. closest.Name)
    else
        warn("[DEBUG] GetClosest: No target selected")
    end
end

--[[ Обновление индикаторов ]]
local function UpdateIndicators()
    if not SilentAim.IndicatorEnabled then return end

    -- Локальный игрок HP
    local localHumanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid")
    local localHP = localHumanoid and math.floor(localHumanoid.Health) or "N/A"
    Indicators.LocalHP.TextLabel.Text = "Local HP: " .. tostring(localHP)

    -- Цель HP и дистанция
    if Check() then
        local targetHumanoid = SilentAim.Selected.Character:FindFirstChild("Humanoid")
        local targetHP = targetHumanoid and math.floor(targetHumanoid.Health) or "N/A"
        Indicators.TargetHP.TextLabel.Text = "Target HP: " .. tostring(targetHP)

        local distance = (LocalPlayer.Character and SilentAim.SelectedPart) and 
            math.floor((LocalPlayer.Character.HumanoidRootPart.Position - SilentAim.SelectedPart.Position).Magnitude) or "N/A"
        Indicators.Distance.TextLabel.Text = "Distance: " .. tostring(distance)
    else
        Indicators.TargetHP.TextLabel.Text = "Target HP: N/A"
        Indicators.Distance.TextLabel.Text = "Distance: N/A"
    end
end

--[[ Обновление Beam ]]
local function UpdateTracer()
    Beam.Enabled = false
    if not SilentAim.SelectedPart or not Check() then
        warn("[DEBUG] UpdateTracer: Check failed or no SelectedPart")
        return
    end

    local lChar = LocalPlayer.Character
    if not lChar then
        warn("[DEBUG] UpdateTracer: No LocalPlayer character")
        return
    end

    local lHead = lChar:FindFirstChild("Head")
    local tChar = SilentAim.Selected.Character
    local tPart = SilentAim.SelectedPart

    if lHead and tPart then
        local predictedPos = getPredictedPosition(SilentAim.Selected) or tPart.Position
        
        StartAttachment.Parent = lHead
        EndAttachment.Parent = tPart
        StartAttachment.WorldPosition = lHead.Position
        EndAttachment.WorldPosition = predictedPos
        Beam.Enabled = true
        warn("[DEBUG] UpdateTracer: Beam updated successfully")
    else
        warn("[DEBUG] UpdateTracer: Missing Head or Target Part")
    end
end

--[[ Выбор цели по клавише или автоматически ]]
local function UpdateTargetSelection()
    if SilentAim.TargetSelectionMode == "Auto" then
        GetClosest()
    end
end

--[[ Отслеживание урона ]]
local function MonitorDamage()
    if not SilentAim.Selected or not SilentAim.Selected.Character then
        warn("[DEBUG] MonitorDamage: No selected target or character")
        return
    end
    local humanoid = SilentAim.Selected.Character:FindFirstChild("Humanoid")
    if not humanoid then
        warn("[DEBUG] MonitorDamage: No humanoid")
        return
    end

    local lastHealth = humanoid.Health
    humanoid:GetPropertyChangedSignal("Health"):Connect(function()
        local newHealth = humanoid.Health
        if newHealth < lastHealth then
            local damage = math.floor(lastHealth - newHealth)
            ShowDamageIndicator(SilentAim.Selected.Name, damage, math.floor(newHealth))
            warn("[DEBUG] MonitorDamage: Damage detected - " .. damage)
        end
        lastHealth = newHealth
    end)
end

--[[ Обработка ввода ]]
UserInputService.InputBegan:Connect(function(input, gpe)
    if gpe then return end
    
    if input.KeyCode == SilentAim.Keybind and SilentAim.TargetSelectionMode == "Keybind" then
        if SilentAim.Selected and SilentAim.Selected ~= LocalPlayer then
            SilentAim.Selected = LocalPlayer
            SilentAim.SelectedPart = nil
            warn("[DEBUG] InputBegan: Target deselected")
        else
            GetClosest()
            MonitorDamage()
            warn("[DEBUG] InputBegan: Target selection triggered")
        end
    elseif input.KeyCode == SilentAim.ResolverKeybind then
        if SilentAim.ResolverMode == "Velocity" then
            SilentAim.ResolverMode = "MoveDirection"
            warn("Resolver Mode: MoveDirection")
        elseif SilentAim.ResolverMode == "MoveDirection" then
            SilentAim.ResolverMode = "CalculateCFrame"
            warn("Resolver Mode: CalculateCFrame")
        else
            SilentAim.ResolverMode = "Velocity"
            warn("Resolver Mode: Velocity")
        end
    end
end)

--[[ Сброс цели при смерти ]]
Players.PlayerRemoving:Connect(function(player)
    if SilentAim.Selected == player then
        SilentAim.Selected = nil
        SilentAim.SelectedPart = nil
        warn("[DEBUG] PlayerRemoving: Target reset due to player leaving")
    end
end)

--[[ Хук на Mouse.Hit / Mouse.Target ]]
local __index
__index = hookmetamethod(game, "__index", function(t, k)
    if t:IsA("Mouse") and (k == "Hit" or k == "Target") then
        if not Check() then
            warn("[DEBUG] __index: Check failed, returning default value")
            return __index(t, k)
        end

        local selPart = SilentAim.SelectedPart
        if selPart then
            local predictedPos = getPredictedPosition(SilentAim.Selected) or selPart.Position
            local hit = CFrame.new(predictedPos)
            warn("[DEBUG] __index: Hook triggered, returning " .. (k == "Hit" and "Hit CFrame" or "Target Part"))
            return k == "Hit" and hit or selPart
        end
    end
    return __index(t, k)
end)

--[[ Heartbeat обновление Beam и цели ]]
RunService.Heartbeat:Connect(function()
    UpdateTracer()
    UpdateTargetSelection()
    UpdateIndicators()
end)

--[[ Очистка при выходе ]]
game:BindToClose(function()
    if Beam then Beam:Destroy() end
    if StartAttachment then StartAttachment:Destroy() end
    if EndAttachment then EndAttachment:Destroy() end
    if ScreenGui then ScreenGui:Destroy() end
end)

warn("Silent Aim loaded successfully!")
warn("Resolver Mode: " .. SilentAim.ResolverMode)
warn("Press " .. tostring(SilentAim.ResolverKeybind) .. " to switch resolver modes")
