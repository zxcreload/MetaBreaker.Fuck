--[[ Adonis Anti-Cheat Bypass ]]
for _, v in pairs(getgc(true)) do
    if type(v) == "table" then
        setreadonly(v, false)
        local indexInstance = rawget(v, "indexInstance")
        if type(indexInstance) == "table" and indexInstance[1] == "kick" then
            setreadonly(indexInstance, false)
            rawset(v, "Table", {"kick", function() coroutine.yield() end})
            warn("\n---[ INFO ]---\nBypassed Adonis Anti-Cheat/Anti-Exploit.\nMethod: Prevented Script Table Communication With Server.")
            break
        end
    end
end

--[[ Silent Aim Settings ]]
getgenv().SilentAim = {
    Enabled = true,
    MultiConfigPredictionEnabled = false, -- Toggle for multi-config prediction system
    DefaultPrediction = 0.161123123, -- Default prediction when multi-config is disabled
    PredictionConfigs = { -- Custom prediction values based on distance
        {Distance = 50, PredictionXZ = 0.12, PredictionY = 0.12},
        {Distance = 100, PredictionXZ = 0.14, PredictionY = 0.14},
        {Distance = 1000, PredictionXZ = 0.16, PredictionY = 0.16},
        {Distance = 10000, PredictionXZ = 0.18, PredictionY = 0.18}
    },
    TargetParts = {
        "HumanoidRootPart",
        "UpperTorso",
        "LowerTorso",
        "Head",
        "LeftUpperArm",
        "RightUpperArm",
        "LeftLowerArm",
        "RightLowerArm",
        "LeftUpperLeg",
        "RightUpperLeg",
        "LeftLowerLeg",
        "RightLowerLeg",
        "UpperLegs",
        "LowerLegs",
        "Legs"
    },
    JumpAimPart = "UpperLegs",
    VisibleCheck = true,
    HitChance = 100,
    Keybind = Enum.KeyCode.Q,
    IgnoreRagdoll = false,
    IgnoreGrabbed = false,
    WallCheck = false,
    TargetSelectionMode = "Keybind", -- "Keybind" or "Auto"
    Whitelist = {"ExamplePlayer", "Friend", "Admin"},
    WhitelistEnabled = false,
    ReacquisitionMode = "Immediate", -- "Immediate", "Nearest", "Priority"
    PriorityList = {"Enemy1", "Enemy2", "Enemy3"}, -- Used in Priority reacquisition mode
    KeepTargetOnDeath = true,

    ResolverMode = "Velocity",
    ResolverKeybind = Enum.KeyCode.J,

    IndicatorEnabled = true,
    IndicatorFontSize = 12,
    IndicatorFont = Enum.Font.Sarpanch,
    GradientColors = {
        Start = {ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 170, 255)), ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 255, 255))},
        End = {ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)), ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 170, 255))}
    },
    DamageIndicatorDuration = 2,
    MaxDamageIndicators = 3,
    MinDamageIndicatorInterval = 0.2,

    HitSounds = {
        hitmarker = 705502934,
        rust = 5043539486,
        CSHS = 9065951723,
        CoD = 5952120301,
        Minecraft = 8837706727
    },
    SelectedHitSound = "hitmarker",
    HitSoundPitch = 1,
    HitSoundVolume = 0.5
}

--[[ Services ]]
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")

--[[ Variables ]]
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local SilentAim = getgenv().SilentAim
local ScreenGui = Instance.new("ScreenGui", game.CoreGui)
ScreenGui.Name = "SilentAimIndicators"
ScreenGui.IgnoreGuiInset = true

--[[ Beam Variables ]]
local Beam, StartAttachment, EndAttachment

--[[ Initialize Beam ]]
local function InitBeam()
    if Beam then Beam:Destroy() end
    if StartAttachment then StartAttachment:Destroy() end
    if EndAttachment then EndAttachment:Destroy() end

    StartAttachment = Instance.new("Attachment")
    EndAttachment = Instance.new("Attachment")

    Beam = Instance.new("Beam")
    Beam.Color = ColorSequence.new(SilentAim.GradientColors.Start) -- Initialize with the starting gradient
    Beam.Width0 = 0.2
    Beam.Width1 = 0.2
    Beam.Transparency = NumberSequence.new(0)
    Beam.Attachment0 = StartAttachment
    Beam.Attachment1 = EndAttachment
    Beam.Enabled = false
    Beam.Parent = Workspace
end

InitBeam()

SilentAim.Selected = nil
SilentAim.SelectedPart = nil
SilentAim.PreviousTarget = nil -- Track previous target for reacquisition

--[[ Resolver Variables ]]
local lastPosition = nil
local lastUpdateTime = nil

--[[ Indicators ]]
local Indicators = {
    Cheatname = nil,
    TargetHP = nil,
    LocalHP = nil,
    Distance = nil,
    Damage = {}
}

local lastIndicatorTime = 0
local pendingDamage = nil

-- List of gradients for animation
local gradientsToAnimate = {}

local function CreateIndicator(name, text, offsetY, animate, isDamageIndicator)
    local frame = Instance.new("Frame")
    frame.Name = name
    frame.Size = UDim2.new(0, 200, 0, name == "Cheatname" and 24 or 20)
    frame.BackgroundTransparency = 1
    frame.Parent = ScreenGui

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, 0, 1, 0)
    label.BackgroundTransparency = 1
    label.Text = text
    label.TextSize = name == "Cheatname" and SilentAim.IndicatorFontSize + 2 or SilentAim.IndicatorFontSize
    label.Font = SilentAim.IndicatorFont
    label.TextColor3 = isDamageIndicator and Color3.fromRGB(255, 0, 0) or Color3.fromRGB(255, 255, 255)
    label.TextStrokeTransparency = 0.8
    label.TextXAlignment = Enum.TextXAlignment.Center
    label.Parent = frame

    if not isDamageIndicator then
        local gradient = Instance.new("UIGradient")
        gradient.Color = ColorSequence.new(SilentAim.GradientColors.Start)
        gradient.Parent = label
        table.insert(gradientsToAnimate, gradient)
    end

    if animate then
        frame.Position = UDim2.new(0.5, -300, 0.5, offsetY)
        local targetPosition = UDim2.new(0.5, -100, 0.5, offsetY)
        local tweenInfo = TweenInfo.new(0.7, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut)
        local tween = TweenService:Create(frame, tweenInfo, {Position = targetPosition})
        tween:Play()
    else
        frame.Position = UDim2.new(0.5, -100, 0.5, offsetY)
    end

    return frame, label
end

local function ShowDamageIndicator(targetName, damage, remainingHP)
    local currentTime = tick()
    local timeSinceLast = currentTime - lastIndicatorTime

    local hitSound = Instance.new("Sound")
    hitSound.Parent = game.CoreGui
    hitSound.SoundId = "rbxassetid://" .. SilentAim.HitSounds[SilentAim.SelectedHitSound]
    hitSound.PlaybackSpeed = SilentAim.HitSoundPitch
    hitSound.Volume = SilentAim.HitSoundVolume
    hitSound.PlayOnRemove = true
    hitSound:Destroy()

    if timeSinceLast < SilentAim.MinDamageIndicatorInterval and Indicators.Damage[#Indicators.Damage] then
        if pendingDamage then
            pendingDamage.damage = pendingDamage.damage + damage
        else
            pendingDamage = {damage = damage, remainingHP = remainingHP}
        end
        local lastIndicator = Indicators.Damage[#Indicators.Damage]
        local text = string.format("hit %s %d (%d)", targetName, pendingDamage.damage, pendingDamage.remainingHP)
        lastIndicator.TextLabel.Text = text
        return
    end

    local totalDamage = damage
    if pendingDamage then
        totalDamage = totalDamage + pendingDamage.damage
        remainingHP = pendingDamage.remainingHP
        pendingDamage = nil
    end

    local text = string.format("hit %s %d (%d)", targetName, totalDamage, remainingHP)
    local offsetY = 150 + (#Indicators.Damage * 10)
    local dmgIndicator, dmgLabel = CreateIndicator("Damage_" .. tostring(tick()), text, offsetY, true, true)
    table.insert(Indicators.Damage, dmgIndicator)

    lastIndicatorTime = currentTime

    if #Indicators.Damage > SilentAim.MaxDamageIndicators then
        local oldestIndicator = table.remove(Indicators.Damage, 1)
        if oldestIndicator then
            oldestIndicator:Destroy()
        end
    end

    for i, indicator in ipairs(Indicators.Damage) do
        indicator.Position = UDim2.new(0.5, -100, 0.5, 150 + ((i - 1) * 10))
    end

    local fadeInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut)
    local fadeTween = TweenService:Create(dmgLabel, fadeInfo, {TextTransparency = 1, TextStrokeTransparency = 1})
    task.delay(SilentAim.DamageIndicatorDuration - 0.5, function()
        fadeTween:Play()
        fadeTween.Completed:Connect(function()
            for i, v in ipairs(Indicators.Damage) do
                if v == dmgIndicator then
                    table.remove(Indicators.Damage, i)
                    v:Destroy()
                    break
                end
            end

            for i, indicator in ipairs(Indicators.Damage) do
                indicator.Position = UDim2.new(0.5, -100, 0.5, 150 + ((i - 1) * 10))
            end
        end)
    end)
end

local function InitIndicators()
    Indicators.Cheatname = CreateIndicator("Cheatname", "metaBreakerEnhanced.lua", 106, false, false)
    Indicators.TargetHP = CreateIndicator("TargetHP", "Target HP: N/A", 120, false, false)
    Indicators.LocalHP = CreateIndicator("LocalHP", "Local HP: N/A", 130, false, false)
    Indicators.Distance = CreateIndicator("Distance", "Distance: N/A", 140, false, false)
end

if SilentAim.IndicatorEnabled then
    InitIndicators()
end

-- Color interpolation function
local function LerpColor(color1, color2, t)
    return Color3.new(
        color1.R + (color2.R - color1.R) * t,
        color1.G + (color2.G - color1.G) * t,
        color1.B + (color2.B - color1.B) * t
    )
end

-- Gradient animation
local gradientAnimationConnection
local function StartGradientAnimation()
    if gradientAnimationConnection then
        gradientAnimationConnection:Disconnect()
    end

    local startTime = tick()
    local duration = 2

    gradientAnimationConnection = RunService.Heartbeat:Connect(function()
        local elapsed = (tick() - startTime) % duration
        local t = elapsed / duration

        local startKeypoints = SilentAim.GradientColors.Start
        local endKeypoints = SilentAim.GradientColors.End

        local newKeypoints = {}
        for i = 1, math.max(#startKeypoints, #endKeypoints) do
            local startPoint = startKeypoints[i] or startKeypoints[#startKeypoints]
            local endPoint = endKeypoints[i] or endKeypoints[#endKeypoints]
            local lerpedColor = LerpColor(startPoint.Value, endPoint.Value, t)
            table.insert(newKeypoints, ColorSequenceKeypoint.new(startPoint.Time, lerpedColor))
        end

        -- Update indicator gradients
        for _, gradient in ipairs(gradientsToAnimate) do
            if gradient and gradient.Parent then
                gradient.Color = ColorSequence.new(newKeypoints)
            end
        end

        -- Update beam color to match the gradient
        if Beam and Beam.Parent then
            Beam.Color = ColorSequence.new(newKeypoints)
        end
    end)
end

StartGradientAnimation()

--[[ Get Prediction Based on Distance ]]
local function GetPredictionForDistance(distance)
    if not SilentAim.MultiConfigPredictionEnabled then
        return SilentAim.DefaultPrediction, SilentAim.DefaultPrediction
    end

    local selectedConfig = SilentAim.PredictionConfigs[1] -- Default to first config
    for _, config in ipairs(SilentAim.PredictionConfigs) do
        if distance <= config.Distance then
            selectedConfig = config
            break
        end
    end
    return selectedConfig.PredictionXZ, selectedConfig.PredictionY
end

--[[ Resolver Methods ]]
local function getPredictedPosition(targetPlayer)
    if not targetPlayer or not targetPlayer.Character or not targetPlayer.Character:FindFirstChild("Humanoid") then
        return nil
    end

    local aimPart = SilentAim.SelectedPart or targetPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not aimPart then
        return nil
    end
    
    local aimPartPos = aimPart.Position
    
    if not lastPosition or not lastUpdateTime then
        lastPosition = aimPartPos
        lastUpdateTime = tick()
        return aimPartPos
    end

    local currentTime = tick()
    local deltaTime = currentTime - lastUpdateTime

    -- Calculate distance to target
    local localRoot = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    local distance = localRoot and (localRoot.Position - aimPartPos).Magnitude or math.huge
    local predictionXZ, predictionY = GetPredictionForDistance(distance)
    
    if SilentAim.ResolverMode == "Velocity" then
        local velocity = aimPart.Velocity
        return aimPartPos + Vector3.new(velocity.X * predictionXZ, velocity.Y * predictionY, velocity.Z * predictionXZ)
    elseif SilentAim.ResolverMode == "MoveDirection" then
        return aimPartPos + (targetPlayer.Character.Humanoid.MoveDirection * (predictionXZ * 10))
    elseif SilentAim.ResolverMode == "CalculateCFrame" then
        if (aimPartPos - lastPosition).Magnitude < 0.001 then
            return aimPartPos 
        else
            local distance = (aimPartPos - lastPosition).Magnitude
            local predictedDistance = (distance / deltaTime) * (0.1 * (predictionXZ * 10))
            local predictedPosition = aimPartPos + (aimPartPos - lastPosition).Unit * predictedDistance
            
            local yChange = (aimPartPos.Y - lastPosition.Y) / deltaTime * (0.1 * predictionY)
            predictedPosition = predictedPosition + Vector3.new(0, yChange, 0)
            
            lastUpdateTime = currentTime
            lastPosition = aimPartPos
            return predictedPosition
        end
    end
    return nil
end

--[[ Hit Chance Calculation ]]
local function CalcChance(p)
    return math.random() * 100 <= p
end

--[[ Visibility Check ]]
local function IsPartVisible(part, char)
    if not part or not char then
        return false
    end

    local camera = Workspace.CurrentCamera
    if not camera then
        return false
    end

    local origin = camera.CFrame.Position
    local _, onScreen = camera:WorldToViewportPoint(part.Position)

    if onScreen then
        local rayParams = RaycastParams.new()
        rayParams.FilterType = Enum.RaycastFilterType.Blacklist
        rayParams.FilterDescendantsInstances = {LocalPlayer.Character, camera}
        local result = Workspace:Raycast(origin, part.Position - origin, rayParams)
        return not result or result.Instance:IsDescendantOf(char)
    end

    return false
end

--[[ Whitelist Check ]]
local function IsWhitelisted(player)
    if not SilentAim.WhitelistEnabled then return true end
    
    for _, namePart in ipairs(SilentAim.Whitelist) do
        if string.find(player.Name:lower(), namePart:lower(), 1, true) then
            return true
        end
    end
    
    return false
end

--[[ Get Combined Part for Legs ]]
local function GetCombinedPart(char, partType)
    if not char then
        return nil
    end

    local leftPart, rightPart
    
    if partType == "UpperLegs" then
        leftPart = char:FindFirstChild("LeftUpperLeg")
        rightPart = char:FindFirstChild("RightUpperLeg")
    elseif partType == "LowerLegs" then
        leftPart = char:FindFirstChild("LeftLowerLeg")
        rightPart = char:FindFirstChild("RightLowerLeg")
    elseif partType == "Legs" then
        leftPart = char:FindFirstChild("LeftUpperLeg") or char:FindFirstChild("LeftLowerLeg")
        rightPart = char:FindFirstChild("RightUpperLeg") or char:FindFirstChild("RightLowerLeg")
    end
    
    if not leftPart or not rightPart then
        return nil
    end
    
    local combinedPart = Instance.new("Part")
    combinedPart.Size = Vector3.new(0.1, 0.1, 0.1)
    combinedPart.Transparency = 1
    combinedPart.CanCollide = false
    combinedPart.Anchored = true
    
    local position = (leftPart.Position + rightPart.Position) / 2
    local velocity = (leftPart.Velocity + rightPart.Velocity) / 2
    
    combinedPart.Position = position
    combinedPart.Velocity = velocity
    
    return combinedPart
end

--[[ Get Closest Visible Body Part ]]
local function ClosestPart(char)
    if not char then
        return nil
    end

    local humanoid = char:FindFirstChild("Humanoid")
    if not humanoid then
        return nil
    end

    local camera = Workspace.CurrentCamera
    if not camera then
        return nil
    end

    local isJumping = humanoid:GetState() == Enum.HumanoidStateType.Jumping

    if isJumping and SilentAim.JumpAimPart then
        local jumpPart = char:FindFirstChild(SilentAim.JumpAimPart)
        if not jumpPart and (SilentAim.JumpAimPart == "UpperLegs" or SilentAim.JumpAimPart == "LowerLegs" or SilentAim.JumpAimPart == "Legs") then
            jumpPart = GetCombinedPart(char, SilentAim.JumpAimPart)
        end
        
        if jumpPart and (not SilentAim.WallCheck or IsPartVisible(jumpPart, char)) then
            local _, onScreen = camera:WorldToViewportPoint(jumpPart.Position)
            if onScreen then
                return jumpPart
            end
        end
    end

    for _, partName in ipairs(SilentAim.TargetParts) do
        local part = char:FindFirstChild(partName)
        if not part and (partName == "UpperLegs" or partName == "LowerLegs" or partName == "Legs") then
            part = GetCombinedPart(char, partName)
        end
        
        if part then
            local isVisible = not SilentAim.WallCheck or IsPartVisible(part, char)
            local _, onScreen = camera:WorldToViewportPoint(part.Position)
            if isVisible and onScreen then
                return part
            end
        end
    end

    return nil
end

--[[ Target Reacquisition Logic ]]
local function ReacquireTarget()
    if not SilentAim.KeepTargetOnDeath then
        SilentAim.Selected = nil
        SilentAim.SelectedPart = nil
        return
    end

    if SilentAim.ReacquisitionMode == "Immediate" then
        -- Wait for the previous target to respawn
        if SilentAim.PreviousTarget then
            local player = SilentAim.PreviousTarget
            if player.Character then
                SilentAim.Selected = player
                SilentAim.SelectedPart = ClosestPart(player.Character)
                if SilentAim.SelectedPart then
                    MonitorDamage()
                end
            else
                -- Connect to CharacterAdded to re-target upon respawn
                local connection
                connection = player.CharacterAdded:Connect(function(char)
                    SilentAim.Selected = player
                    SilentAim.SelectedPart = ClosestPart(char)
                    if SilentAim.SelectedPart then
                        MonitorDamage()
                    end
                    connection:Disconnect()
                end)
            end
        end
    elseif SilentAim.ReacquisitionMode == "Nearest" then
        -- Switch to the closest visible player
        GetClosest()
        if SilentAim.Selected and SilentAim.Selected ~= LocalPlayer then
            SilentAim.PreviousTarget = SilentAim.Selected
            MonitorDamage()
        end
    elseif SilentAim.ReacquisitionMode == "Priority" then
        -- Select the next target from the priority list
        for _, playerName in ipairs(SilentAim.PriorityList) do
            local player = Players:FindFirstChild(playerName)
            if player and player ~= LocalPlayer and player.Character and IsWhitelisted(player) then
                local part = ClosestPart(player.Character)
                if part and (not SilentAim.VisibleCheck or IsPartVisible(part, player.Character)) then
                    SilentAim.Selected = player
                    SilentAim.SelectedPart = part
                    SilentAim.PreviousTarget = player
                    MonitorDamage()
                    return
                end
            end
        end
        -- Fallback to closest if no priority target is available
        GetClosest()
        if SilentAim.Selected and SilentAim.Selected ~= LocalPlayer then
            SilentAim.PreviousTarget = SilentAim.Selected
            MonitorDamage()
        end
    end
end

--[[ Check Target State ]]
local function Check()
    local sel = SilentAim
    if not (sel.Enabled and sel.Selected and sel.Selected ~= LocalPlayer) then
        return false
    end

    local char = sel.Selected.Character
    if not char then
        ReacquireTarget()
        return false
    end

    local humanoid = char:FindFirstChild("Humanoid")
    if not humanoid then
        ReacquireTarget()
        return false
    end

    if not sel.KeepTargetOnDeath and humanoid.Health <= 0 then
        ReacquireTarget()
        return false
    end

    local bodyEffects = char:FindFirstChild("BodyEffects")
    if not bodyEffects then
        ReacquireTarget()
        return false
    end

    local ko = bodyEffects:FindFirstChild("K.O")
    if not ko then
        ReacquireTarget()
        return false
    end
    local koValue = ko.Value
    local grabbed = char:FindFirstChild("GRABBING_CONSTRAINT") ~= nil

    if sel.IgnoreRagdoll and koValue then
        ReacquireTarget()
        return false
    end
    if sel.IgnoreGrabbed and grabbed then
        ReacquireTarget()
        return false
    end

    -- Re-select the part if it becomes invalid
    if not sel.SelectedPart then
        sel.SelectedPart = ClosestPart(char)
        if not sel.SelectedPart then
            ReacquireTarget()
            return false
        end
    end

    return true
end

--[[ Get Closest Player ]]
local function GetClosest()
    if not CalcChance(SilentAim.HitChance) then
        SilentAim.Selected = LocalPlayer
        SilentAim.SelectedPart = nil
        return
    end

    local closest, shortest = nil, math.huge
    local targetPart = nil

    local camera = Workspace.CurrentCamera
    if not camera then
        SilentAim.Selected = LocalPlayer
        SilentAim.SelectedPart = nil
        return
    end

    for _, plr in ipairs(Players:GetPlayers()) do
        if plr == LocalPlayer or not IsWhitelisted(plr) then
            continue
        end
        
        local char = plr.Character
        if char and char:FindFirstChild("Humanoid") then
            local part = ClosestPart(char)
            if part then
                local pos, onScreen = camera:WorldToViewportPoint(part.Position)
                if not onScreen then
                    continue
                end
                local dist = (Vector2.new(pos.X, pos.Y) - Vector2.new(Mouse.X, Mouse.Y)).Magnitude

                if dist < shortest and (not SilentAim.VisibleCheck or IsPartVisible(part, char)) then
                    closest = plr
                    targetPart = part
                    shortest = dist
                end
            end
        end
    end

    if closest and targetPart then
        SilentAim.Selected = closest
        SilentAim.SelectedPart = targetPart
        SilentAim.PreviousTarget = closest
    else
        SilentAim.Selected = LocalPlayer
        SilentAim.SelectedPart = nil
    end
end

--[[ Update Indicators ]]
local function UpdateIndicators()
    if not SilentAim.IndicatorEnabled then return end

    local localHumanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid")
    local localHP = localHumanoid and math.floor(localHumanoid.Health) or "N/A"
    Indicators.LocalHP.TextLabel.Text = "Local HP: " .. tostring(localHP)

    if Check() then
        local targetHumanoid = SilentAim.Selected.Character:FindFirstChild("Humanoid")
        local targetHP = targetHumanoid and math.floor(targetHumanoid.Health) or "N/A"
        Indicators.TargetHP.TextLabel.Text = "Target HP: " .. tostring(targetHP)

        local distance = (LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and SilentAim.SelectedPart) and 
            math.floor((LocalPlayer.Character.HumanoidRootPart.Position - SilentAim.SelectedPart.Position).Magnitude) or "N/A"
        Indicators.Distance.TextLabel.Text = "Distance: " .. tostring(distance)
    else
        Indicators.TargetHP.TextLabel.Text = "Target HP: N/A"
        Indicators.Distance.TextLabel.Text = "Distance: N/A"
    end
end

--[[ Update Beam ]]
local function UpdateTracer()
    Beam.Enabled = false
    if not Check() then
        return
    end

    local lChar = LocalPlayer.Character
    if not lChar then
        return
    end

    local lHead = lChar:FindFirstChild("Head")
    local tChar = SilentAim.Selected.Character
    local tPart = SilentAim.SelectedPart

    if lHead and tPart and tChar then
        local predictedPos = getPredictedPosition(SilentAim.Selected) or tPart.Position
        
        StartAttachment.Parent = lHead
        EndAttachment.Parent = tPart
        StartAttachment.WorldPosition = lHead.Position
        EndAttachment.WorldPosition = predictedPos
        Beam.Enabled = true
    end
end

--[[ Update Target Selection ]]
local function UpdateTargetSelection()
    if SilentAim.TargetSelectionMode == "Auto" then
        GetClosest()
        if SilentAim.Selected and SilentAim.Selected ~= LocalPlayer then
            SilentAim.PreviousTarget = SilentAim.Selected
            MonitorDamage()
        end
    end
end

--[[ Monitor Damage ]]
local healthConnection = nil

local function MonitorDamage()
    if not SilentAim.Selected or not SilentAim.Selected.Character then
        return
    end
    local humanoid = SilentAim.Selected.Character:FindFirstChild("Humanoid")
    if not humanoid then
        return
    end

    if healthConnection then
        healthConnection:Disconnect()
        healthConnection = nil
    end

    local lastHealth = humanoid.Health
    healthConnection = humanoid:GetPropertyChangedSignal("Health"):Connect(function()
        if not SilentAim.Selected then
            if healthConnection then
                healthConnection:Disconnect()
                healthConnection = nil
            end
            return
        end

        local newHealth = humanoid.Health
        if newHealth < lastHealth then
            local damage = math.floor(lastHealth - newHealth)
            ShowDamageIndicator(SilentAim.Selected.Name, damage, math.floor(newHealth))
        elseif newHealth <= 0 then
            ReacquireTarget()
        end
        lastHealth = newHealth
    end)
end

--[[ Handle Input ]]
UserInputService.InputBegan:Connect(function(input, gpe)
    if gpe then return end
    
    if input.KeyCode == SilentAim.Keybind and SilentAim.TargetSelectionMode == "Keybind" then
        if SilentAim.Selected and SilentAim.Selected ~= LocalPlayer then
            SilentAim.Selected = LocalPlayer
            SilentAim.SelectedPart = nil
            SilentAim.PreviousTarget = nil
            if healthConnection then
                healthConnection:Disconnect()
                healthConnection = nil
            end
        else
            GetClosest()
            if SilentAim.Selected and SilentAim.Selected ~= LocalPlayer then
                SilentAim.PreviousTarget = SilentAim.Selected
                MonitorDamage()
            end
        end
    elseif input.KeyCode == SilentAim.ResolverKeybind then
        if SilentAim.ResolverMode == "Velocity" then
            SilentAim.ResolverMode = "MoveDirection"
            warn("Resolver Mode: MoveDirection")
        elseif SilentAim.ResolverMode == "MoveDirection" then
            SilentAim.ResolverMode = "CalculateCFrame"
            warn("Resolver Mode: CalculateCFrame")
        else
            SilentAim.ResolverMode = "Velocity"
            warn("Resolver Mode: Velocity")
        end
    end
end)

--[[ Track Player Respawn ]]
Players.PlayerAdded:Connect(function(player)
    if SilentAim.KeepTargetOnDeath and SilentAim.PreviousTarget == player and SilentAim.ReacquisitionMode == "Immediate" then
        player.CharacterAdded:Connect(function(char)
            SilentAim.Selected = player
            SilentAim.SelectedPart = ClosestPart(char)
            if SilentAim.SelectedPart then
                MonitorDamage()
            end
        end)
    end
end)

--[[ Reset Target on Player Leave ]]
Players.PlayerRemoving:Connect(function(player)
    if SilentAim.Selected == player or SilentAim.PreviousTarget == player then
        SilentAim.Selected = nil
        SilentAim.SelectedPart = nil
        SilentAim.PreviousTarget = nil
        if healthConnection then
            healthConnection:Disconnect()
            healthConnection = nil
        end
        ReacquireTarget()
    end
end)

--[[ Mouse.Hit / Mouse.Target Hook ]]
local __index
__index = hookmetamethod(game, "__index", function(t, k)
    if t:IsA("Mouse") and (k == "Hit" or k == "Target") then
        if not Check() then
            return __index(t, k)
        end

        local selPart = SilentAim.SelectedPart
        if selPart then
            local predictedPos = getPredictedPosition(SilentAim.Selected) or selPart.Position
            local hit = CFrame.new(predictedPos)
            return k == "Hit" and hit or selPart
        end
    end
    return __index(t, k)
end)

--[[ Heartbeat Update ]]
RunService.Heartbeat:Connect(function()
    UpdateTracer()
    UpdateTargetSelection()
    UpdateIndicators()
end)

--[[ Cleanup on Exit ]]
game:BindToClose(function()
    if Beam then Beam:Destroy() end
    if StartAttachment then StartAttachment:Destroy() end
    if EndAttachment then EndAttachment:Destroy() end
    if ScreenGui then ScreenGui:Destroy() end
    if healthConnection then
        healthConnection:Disconnect()
        healthConnection = nil
    end
    if gradientAnimationConnection then
        gradientAnimationConnection:Disconnect()
        gradientAnimationConnection = nil
    end
end)

warn("Enhanced Silent Aim with Multi-Config Prediction loaded successfully!")
warn("Multi-Config Prediction: " .. (SilentAim.MultiConfigPredictionEnabled and "Enabled" or "Disabled"))
warn("Reacquisition Mode: " .. SilentAim.ReacquisitionMode)
warn("Resolver Mode: " .. SilentAim.ResolverMode)
warn("Press " .. tostring(SilentAim.ResolverKeybind) .. " to switch resolver modes")
